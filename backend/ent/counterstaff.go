// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team18/app/ent/counterstaff"
)

// CounterStaff is the model entity for the CounterStaff schema.
type CounterStaff struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CounterStaffQuery when eager-loading is set.
	Edges CounterStaffEdges `json:"edges"`
}

// CounterStaffEdges holds the relations/edges for other nodes in the graph.
type CounterStaffEdges struct {
	// Checkins holds the value of the checkins edge.
	Checkins []*CheckIn
	// Checkouts holds the value of the checkouts edge.
	Checkouts []*Checkout
	// Details holds the value of the details edge.
	Details []*FurnitureDetail
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CheckinsOrErr returns the Checkins value or an error if the edge
// was not loaded in eager-loading.
func (e CounterStaffEdges) CheckinsOrErr() ([]*CheckIn, error) {
	if e.loadedTypes[0] {
		return e.Checkins, nil
	}
	return nil, &NotLoadedError{edge: "checkins"}
}

// CheckoutsOrErr returns the Checkouts value or an error if the edge
// was not loaded in eager-loading.
func (e CounterStaffEdges) CheckoutsOrErr() ([]*Checkout, error) {
	if e.loadedTypes[1] {
		return e.Checkouts, nil
	}
	return nil, &NotLoadedError{edge: "checkouts"}
}

// DetailsOrErr returns the Details value or an error if the edge
// was not loaded in eager-loading.
func (e CounterStaffEdges) DetailsOrErr() ([]*FurnitureDetail, error) {
	if e.loadedTypes[2] {
		return e.Details, nil
	}
	return nil, &NotLoadedError{edge: "details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CounterStaff) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // email
		&sql.NullString{}, // password
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CounterStaff fields.
func (cs *CounterStaff) assignValues(values ...interface{}) error {
	if m, n := len(values), len(counterstaff.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cs.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		cs.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[1])
	} else if value.Valid {
		cs.Email = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field password", values[2])
	} else if value.Valid {
		cs.Password = value.String
	}
	return nil
}

// QueryCheckins queries the checkins edge of the CounterStaff.
func (cs *CounterStaff) QueryCheckins() *CheckInQuery {
	return (&CounterStaffClient{config: cs.config}).QueryCheckins(cs)
}

// QueryCheckouts queries the checkouts edge of the CounterStaff.
func (cs *CounterStaff) QueryCheckouts() *CheckoutQuery {
	return (&CounterStaffClient{config: cs.config}).QueryCheckouts(cs)
}

// QueryDetails queries the details edge of the CounterStaff.
func (cs *CounterStaff) QueryDetails() *FurnitureDetailQuery {
	return (&CounterStaffClient{config: cs.config}).QueryDetails(cs)
}

// Update returns a builder for updating this CounterStaff.
// Note that, you need to call CounterStaff.Unwrap() before calling this method, if this CounterStaff
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CounterStaff) Update() *CounterStaffUpdateOne {
	return (&CounterStaffClient{config: cs.config}).UpdateOne(cs)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cs *CounterStaff) Unwrap() *CounterStaff {
	tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CounterStaff is not a transactional entity")
	}
	cs.config.driver = tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CounterStaff) String() string {
	var builder strings.Builder
	builder.WriteString("CounterStaff(")
	builder.WriteString(fmt.Sprintf("id=%v", cs.ID))
	builder.WriteString(", name=")
	builder.WriteString(cs.Name)
	builder.WriteString(", email=")
	builder.WriteString(cs.Email)
	builder.WriteString(", password=")
	builder.WriteString(cs.Password)
	builder.WriteByte(')')
	return builder.String()
}

// CounterStaffs is a parsable slice of CounterStaff.
type CounterStaffs []*CounterStaff

func (cs CounterStaffs) config(cfg config) {
	for _i := range cs {
		cs[_i].config = cfg
	}
}
