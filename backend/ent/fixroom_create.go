// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/customer"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/fixroom"
	"github.com/team18/app/ent/furnituredetail"
)

// FixRoomCreate is the builder for creating a FixRoom entity.
type FixRoomCreate struct {
	config
	mutation *FixRoomMutation
	hooks    []Hook
}

// SetFixDetail sets the fix_detail field.
func (frc *FixRoomCreate) SetFixDetail(s string) *FixRoomCreate {
	frc.mutation.SetFixDetail(s)
	return frc
}

// SetPhoneNumber sets the phone_number field.
func (frc *FixRoomCreate) SetPhoneNumber(s string) *FixRoomCreate {
	frc.mutation.SetPhoneNumber(s)
	return frc
}

// SetFacebook sets the facebook field.
func (frc *FixRoomCreate) SetFacebook(s string) *FixRoomCreate {
	frc.mutation.SetFacebook(s)
	return frc
}

// SetCustomerID sets the customer edge to Customer by id.
func (frc *FixRoomCreate) SetCustomerID(id int) *FixRoomCreate {
	frc.mutation.SetCustomerID(id)
	return frc
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (frc *FixRoomCreate) SetNillableCustomerID(id *int) *FixRoomCreate {
	if id != nil {
		frc = frc.SetCustomerID(*id)
	}
	return frc
}

// SetCustomer sets the customer edge to Customer.
func (frc *FixRoomCreate) SetCustomer(c *Customer) *FixRoomCreate {
	return frc.SetCustomerID(c.ID)
}

// SetFurnitureDetailID sets the furnitureDetail edge to FurnitureDetail by id.
func (frc *FixRoomCreate) SetFurnitureDetailID(id int) *FixRoomCreate {
	frc.mutation.SetFurnitureDetailID(id)
	return frc
}

// SetNillableFurnitureDetailID sets the furnitureDetail edge to FurnitureDetail by id if the given value is not nil.
func (frc *FixRoomCreate) SetNillableFurnitureDetailID(id *int) *FixRoomCreate {
	if id != nil {
		frc = frc.SetFurnitureDetailID(*id)
	}
	return frc
}

// SetFurnitureDetail sets the furnitureDetail edge to FurnitureDetail.
func (frc *FixRoomCreate) SetFurnitureDetail(f *FurnitureDetail) *FixRoomCreate {
	return frc.SetFurnitureDetailID(f.ID)
}

// SetRoomID sets the room edge to DataRoom by id.
func (frc *FixRoomCreate) SetRoomID(id int) *FixRoomCreate {
	frc.mutation.SetRoomID(id)
	return frc
}

// SetNillableRoomID sets the room edge to DataRoom by id if the given value is not nil.
func (frc *FixRoomCreate) SetNillableRoomID(id *int) *FixRoomCreate {
	if id != nil {
		frc = frc.SetRoomID(*id)
	}
	return frc
}

// SetRoom sets the room edge to DataRoom.
func (frc *FixRoomCreate) SetRoom(d *DataRoom) *FixRoomCreate {
	return frc.SetRoomID(d.ID)
}

// Mutation returns the FixRoomMutation object of the builder.
func (frc *FixRoomCreate) Mutation() *FixRoomMutation {
	return frc.mutation
}

// Save creates the FixRoom in the database.
func (frc *FixRoomCreate) Save(ctx context.Context) (*FixRoom, error) {
	if _, ok := frc.mutation.FixDetail(); !ok {
		return nil, &ValidationError{Name: "fix_detail", err: errors.New("ent: missing required field \"fix_detail\"")}
	}
	if v, ok := frc.mutation.FixDetail(); ok {
		if err := fixroom.FixDetailValidator(v); err != nil {
			return nil, &ValidationError{Name: "fix_detail", err: fmt.Errorf("ent: validator failed for field \"fix_detail\": %w", err)}
		}
	}
	if _, ok := frc.mutation.PhoneNumber(); !ok {
		return nil, &ValidationError{Name: "phone_number", err: errors.New("ent: missing required field \"phone_number\"")}
	}
	if v, ok := frc.mutation.PhoneNumber(); ok {
		if err := fixroom.PhoneNumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	if _, ok := frc.mutation.Facebook(); !ok {
		return nil, &ValidationError{Name: "facebook", err: errors.New("ent: missing required field \"facebook\"")}
	}
	if v, ok := frc.mutation.Facebook(); ok {
		if err := fixroom.FacebookValidator(v); err != nil {
			return nil, &ValidationError{Name: "facebook", err: fmt.Errorf("ent: validator failed for field \"facebook\": %w", err)}
		}
	}
	var (
		err  error
		node *FixRoom
	)
	if len(frc.hooks) == 0 {
		node, err = frc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FixRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			frc.mutation = mutation
			node, err = frc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(frc.hooks) - 1; i >= 0; i-- {
			mut = frc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, frc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FixRoomCreate) SaveX(ctx context.Context) *FixRoom {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (frc *FixRoomCreate) sqlSave(ctx context.Context) (*FixRoom, error) {
	fr, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	fr.ID = int(id)
	return fr, nil
}

func (frc *FixRoomCreate) createSpec() (*FixRoom, *sqlgraph.CreateSpec) {
	var (
		fr    = &FixRoom{config: frc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fixroom.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fixroom.FieldID,
			},
		}
	)
	if value, ok := frc.mutation.FixDetail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixroom.FieldFixDetail,
		})
		fr.FixDetail = value
	}
	if value, ok := frc.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixroom.FieldPhoneNumber,
		})
		fr.PhoneNumber = value
	}
	if value, ok := frc.mutation.Facebook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixroom.FieldFacebook,
		})
		fr.Facebook = value
	}
	if nodes := frc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixroom.CustomerTable,
			Columns: []string{fixroom.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := frc.mutation.FurnitureDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixroom.FurnitureDetailTable,
			Columns: []string{fixroom.FurnitureDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituredetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := frc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fixroom.RoomTable,
			Columns: []string{fixroom.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return fr, _spec
}
