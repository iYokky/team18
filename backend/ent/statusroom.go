// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team18/app/ent/statusroom"
)

// StatusRoom is the model entity for the StatusRoom schema.
type StatusRoom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StatusName holds the value of the "status_name" field.
	StatusName string `json:"status_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusRoomQuery when eager-loading is set.
	Edges StatusRoomEdges `json:"edges"`
}

// StatusRoomEdges holds the relations/edges for other nodes in the graph.
type StatusRoomEdges struct {
	// Datarooms holds the value of the datarooms edge.
	Datarooms []*DataRoom
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DataroomsOrErr returns the Datarooms value or an error if the edge
// was not loaded in eager-loading.
func (e StatusRoomEdges) DataroomsOrErr() ([]*DataRoom, error) {
	if e.loadedTypes[0] {
		return e.Datarooms, nil
	}
	return nil, &NotLoadedError{edge: "datarooms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatusRoom) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // status_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatusRoom fields.
func (sr *StatusRoom) assignValues(values ...interface{}) error {
	if m, n := len(values), len(statusroom.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	sr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status_name", values[0])
	} else if value.Valid {
		sr.StatusName = value.String
	}
	return nil
}

// QueryDatarooms queries the datarooms edge of the StatusRoom.
func (sr *StatusRoom) QueryDatarooms() *DataRoomQuery {
	return (&StatusRoomClient{config: sr.config}).QueryDatarooms(sr)
}

// Update returns a builder for updating this StatusRoom.
// Note that, you need to call StatusRoom.Unwrap() before calling this method, if this StatusRoom
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *StatusRoom) Update() *StatusRoomUpdateOne {
	return (&StatusRoomClient{config: sr.config}).UpdateOne(sr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (sr *StatusRoom) Unwrap() *StatusRoom {
	tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatusRoom is not a transactional entity")
	}
	sr.config.driver = tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *StatusRoom) String() string {
	var builder strings.Builder
	builder.WriteString("StatusRoom(")
	builder.WriteString(fmt.Sprintf("id=%v", sr.ID))
	builder.WriteString(", status_name=")
	builder.WriteString(sr.StatusName)
	builder.WriteByte(')')
	return builder.String()
}

// StatusRooms is a parsable slice of StatusRoom.
type StatusRooms []*StatusRoom

func (sr StatusRooms) config(cfg config) {
	for _i := range sr {
		sr[_i].config = cfg
	}
}
