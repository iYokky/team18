// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team18/app/ent/promotion"
)

// Promotion is the model entity for the Promotion schema.
type Promotion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PromotionName holds the value of the "promotion_name" field.
	PromotionName string `json:"promotion_name,omitempty"`
	// Discount holds the value of the "discount" field.
	Discount float64 `json:"discount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionQuery when eager-loading is set.
	Edges PromotionEdges `json:"edges"`
}

// PromotionEdges holds the relations/edges for other nodes in the graph.
type PromotionEdges struct {
	// Reserves holds the value of the reserves edge.
	Reserves []*ReserveRoom
	// Datarooms holds the value of the datarooms edge.
	Datarooms []*DataRoom
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ReservesOrErr returns the Reserves value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionEdges) ReservesOrErr() ([]*ReserveRoom, error) {
	if e.loadedTypes[0] {
		return e.Reserves, nil
	}
	return nil, &NotLoadedError{edge: "reserves"}
}

// DataroomsOrErr returns the Datarooms value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionEdges) DataroomsOrErr() ([]*DataRoom, error) {
	if e.loadedTypes[1] {
		return e.Datarooms, nil
	}
	return nil, &NotLoadedError{edge: "datarooms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Promotion) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullString{},  // promotion_name
		&sql.NullFloat64{}, // discount
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Promotion fields.
func (pr *Promotion) assignValues(values ...interface{}) error {
	if m, n := len(values), len(promotion.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field promotion_name", values[0])
	} else if value.Valid {
		pr.PromotionName = value.String
	}
	if value, ok := values[1].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field discount", values[1])
	} else if value.Valid {
		pr.Discount = value.Float64
	}
	return nil
}

// QueryReserves queries the reserves edge of the Promotion.
func (pr *Promotion) QueryReserves() *ReserveRoomQuery {
	return (&PromotionClient{config: pr.config}).QueryReserves(pr)
}

// QueryDatarooms queries the datarooms edge of the Promotion.
func (pr *Promotion) QueryDatarooms() *DataRoomQuery {
	return (&PromotionClient{config: pr.config}).QueryDatarooms(pr)
}

// Update returns a builder for updating this Promotion.
// Note that, you need to call Promotion.Unwrap() before calling this method, if this Promotion
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Promotion) Update() *PromotionUpdateOne {
	return (&PromotionClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Promotion) Unwrap() *Promotion {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Promotion is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Promotion) String() string {
	var builder strings.Builder
	builder.WriteString("Promotion(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", promotion_name=")
	builder.WriteString(pr.PromotionName)
	builder.WriteString(", discount=")
	builder.WriteString(fmt.Sprintf("%v", pr.Discount))
	builder.WriteByte(')')
	return builder.String()
}

// Promotions is a parsable slice of Promotion.
type Promotions []*Promotion

func (pr Promotions) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
