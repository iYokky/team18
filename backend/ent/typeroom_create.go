// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/typeroom"
)

// TypeRoomCreate is the builder for creating a TypeRoom entity.
type TypeRoomCreate struct {
	config
	mutation *TypeRoomMutation
	hooks    []Hook
}

// SetTypeName sets the type_name field.
func (trc *TypeRoomCreate) SetTypeName(s string) *TypeRoomCreate {
	trc.mutation.SetTypeName(s)
	return trc
}

// AddDataroomIDs adds the datarooms edge to DataRoom by ids.
func (trc *TypeRoomCreate) AddDataroomIDs(ids ...int) *TypeRoomCreate {
	trc.mutation.AddDataroomIDs(ids...)
	return trc
}

// AddDatarooms adds the datarooms edges to DataRoom.
func (trc *TypeRoomCreate) AddDatarooms(d ...*DataRoom) *TypeRoomCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return trc.AddDataroomIDs(ids...)
}

// Mutation returns the TypeRoomMutation object of the builder.
func (trc *TypeRoomCreate) Mutation() *TypeRoomMutation {
	return trc.mutation
}

// Save creates the TypeRoom in the database.
func (trc *TypeRoomCreate) Save(ctx context.Context) (*TypeRoom, error) {
	if _, ok := trc.mutation.TypeName(); !ok {
		return nil, &ValidationError{Name: "type_name", err: errors.New("ent: missing required field \"type_name\"")}
	}
	if v, ok := trc.mutation.TypeName(); ok {
		if err := typeroom.TypeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "type_name", err: fmt.Errorf("ent: validator failed for field \"type_name\": %w", err)}
		}
	}
	var (
		err  error
		node *TypeRoom
	)
	if len(trc.hooks) == 0 {
		node, err = trc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TypeRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			trc.mutation = mutation
			node, err = trc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(trc.hooks) - 1; i >= 0; i-- {
			mut = trc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, trc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TypeRoomCreate) SaveX(ctx context.Context) *TypeRoom {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (trc *TypeRoomCreate) sqlSave(ctx context.Context) (*TypeRoom, error) {
	tr, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	tr.ID = int(id)
	return tr, nil
}

func (trc *TypeRoomCreate) createSpec() (*TypeRoom, *sqlgraph.CreateSpec) {
	var (
		tr    = &TypeRoom{config: trc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: typeroom.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: typeroom.FieldID,
			},
		}
	)
	if value, ok := trc.mutation.TypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: typeroom.FieldTypeName,
		})
		tr.TypeName = value
	}
	if nodes := trc.mutation.DataroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typeroom.DataroomsTable,
			Columns: []string{typeroom.DataroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return tr, _spec
}
