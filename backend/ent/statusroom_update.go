// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/predicate"
	"github.com/team18/app/ent/statusroom"
)

// StatusRoomUpdate is the builder for updating StatusRoom entities.
type StatusRoomUpdate struct {
	config
	hooks      []Hook
	mutation   *StatusRoomMutation
	predicates []predicate.StatusRoom
}

// Where adds a new predicate for the builder.
func (sru *StatusRoomUpdate) Where(ps ...predicate.StatusRoom) *StatusRoomUpdate {
	sru.predicates = append(sru.predicates, ps...)
	return sru
}

// SetStatusName sets the status_name field.
func (sru *StatusRoomUpdate) SetStatusName(s string) *StatusRoomUpdate {
	sru.mutation.SetStatusName(s)
	return sru
}

// AddDataroomIDs adds the datarooms edge to DataRoom by ids.
func (sru *StatusRoomUpdate) AddDataroomIDs(ids ...int) *StatusRoomUpdate {
	sru.mutation.AddDataroomIDs(ids...)
	return sru
}

// AddDatarooms adds the datarooms edges to DataRoom.
func (sru *StatusRoomUpdate) AddDatarooms(d ...*DataRoom) *StatusRoomUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sru.AddDataroomIDs(ids...)
}

// Mutation returns the StatusRoomMutation object of the builder.
func (sru *StatusRoomUpdate) Mutation() *StatusRoomMutation {
	return sru.mutation
}

// RemoveDataroomIDs removes the datarooms edge to DataRoom by ids.
func (sru *StatusRoomUpdate) RemoveDataroomIDs(ids ...int) *StatusRoomUpdate {
	sru.mutation.RemoveDataroomIDs(ids...)
	return sru
}

// RemoveDatarooms removes datarooms edges to DataRoom.
func (sru *StatusRoomUpdate) RemoveDatarooms(d ...*DataRoom) *StatusRoomUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sru.RemoveDataroomIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (sru *StatusRoomUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := sru.mutation.StatusName(); ok {
		if err := statusroom.StatusNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "status_name", err: fmt.Errorf("ent: validator failed for field \"status_name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(sru.hooks) == 0 {
		affected, err = sru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sru.mutation = mutation
			affected, err = sru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sru.hooks) - 1; i >= 0; i-- {
			mut = sru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sru *StatusRoomUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *StatusRoomUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *StatusRoomUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sru *StatusRoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statusroom.Table,
			Columns: statusroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusroom.FieldID,
			},
		},
	}
	if ps := sru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.StatusName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusroom.FieldStatusName,
		})
	}
	if nodes := sru.mutation.RemovedDataroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusroom.DataroomsTable,
			Columns: []string{statusroom.DataroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.DataroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusroom.DataroomsTable,
			Columns: []string{statusroom.DataroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statusroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StatusRoomUpdateOne is the builder for updating a single StatusRoom entity.
type StatusRoomUpdateOne struct {
	config
	hooks    []Hook
	mutation *StatusRoomMutation
}

// SetStatusName sets the status_name field.
func (sruo *StatusRoomUpdateOne) SetStatusName(s string) *StatusRoomUpdateOne {
	sruo.mutation.SetStatusName(s)
	return sruo
}

// AddDataroomIDs adds the datarooms edge to DataRoom by ids.
func (sruo *StatusRoomUpdateOne) AddDataroomIDs(ids ...int) *StatusRoomUpdateOne {
	sruo.mutation.AddDataroomIDs(ids...)
	return sruo
}

// AddDatarooms adds the datarooms edges to DataRoom.
func (sruo *StatusRoomUpdateOne) AddDatarooms(d ...*DataRoom) *StatusRoomUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sruo.AddDataroomIDs(ids...)
}

// Mutation returns the StatusRoomMutation object of the builder.
func (sruo *StatusRoomUpdateOne) Mutation() *StatusRoomMutation {
	return sruo.mutation
}

// RemoveDataroomIDs removes the datarooms edge to DataRoom by ids.
func (sruo *StatusRoomUpdateOne) RemoveDataroomIDs(ids ...int) *StatusRoomUpdateOne {
	sruo.mutation.RemoveDataroomIDs(ids...)
	return sruo
}

// RemoveDatarooms removes datarooms edges to DataRoom.
func (sruo *StatusRoomUpdateOne) RemoveDatarooms(d ...*DataRoom) *StatusRoomUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sruo.RemoveDataroomIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (sruo *StatusRoomUpdateOne) Save(ctx context.Context) (*StatusRoom, error) {
	if v, ok := sruo.mutation.StatusName(); ok {
		if err := statusroom.StatusNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "status_name", err: fmt.Errorf("ent: validator failed for field \"status_name\": %w", err)}
		}
	}

	var (
		err  error
		node *StatusRoom
	)
	if len(sruo.hooks) == 0 {
		node, err = sruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sruo.mutation = mutation
			node, err = sruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sruo.hooks) - 1; i >= 0; i-- {
			mut = sruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *StatusRoomUpdateOne) SaveX(ctx context.Context) *StatusRoom {
	sr, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return sr
}

// Exec executes the query on the entity.
func (sruo *StatusRoomUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *StatusRoomUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sruo *StatusRoomUpdateOne) sqlSave(ctx context.Context) (sr *StatusRoom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statusroom.Table,
			Columns: statusroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusroom.FieldID,
			},
		},
	}
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StatusRoom.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := sruo.mutation.StatusName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusroom.FieldStatusName,
		})
	}
	if nodes := sruo.mutation.RemovedDataroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusroom.DataroomsTable,
			Columns: []string{statusroom.DataroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.DataroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusroom.DataroomsTable,
			Columns: []string{statusroom.DataroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	sr = &StatusRoom{config: sruo.config}
	_spec.Assign = sr.assignValues
	_spec.ScanValues = sr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statusroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return sr, nil
}
