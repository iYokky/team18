// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/fixroom"
	"github.com/team18/app/ent/furnituredetail"
	"github.com/team18/app/ent/predicate"
	"github.com/team18/app/ent/promotion"
	"github.com/team18/app/ent/reserveroom"
	"github.com/team18/app/ent/statusroom"
	"github.com/team18/app/ent/typeroom"
)

// DataRoomUpdate is the builder for updating DataRoom entities.
type DataRoomUpdate struct {
	config
	hooks      []Hook
	mutation   *DataRoomMutation
	predicates []predicate.DataRoom
}

// Where adds a new predicate for the builder.
func (dru *DataRoomUpdate) Where(ps ...predicate.DataRoom) *DataRoomUpdate {
	dru.predicates = append(dru.predicates, ps...)
	return dru
}

// SetPrice sets the price field.
func (dru *DataRoomUpdate) SetPrice(f float64) *DataRoomUpdate {
	dru.mutation.ResetPrice()
	dru.mutation.SetPrice(f)
	return dru
}

// AddPrice adds f to price.
func (dru *DataRoomUpdate) AddPrice(f float64) *DataRoomUpdate {
	dru.mutation.AddPrice(f)
	return dru
}

// SetRoomnumber sets the roomnumber field.
func (dru *DataRoomUpdate) SetRoomnumber(s string) *DataRoomUpdate {
	dru.mutation.SetRoomnumber(s)
	return dru
}

// AddReserfIDs adds the reserves edge to ReserveRoom by ids.
func (dru *DataRoomUpdate) AddReserfIDs(ids ...int) *DataRoomUpdate {
	dru.mutation.AddReserfIDs(ids...)
	return dru
}

// AddReserves adds the reserves edges to ReserveRoom.
func (dru *DataRoomUpdate) AddReserves(r ...*ReserveRoom) *DataRoomUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dru.AddReserfIDs(ids...)
}

// AddFixIDs adds the fixs edge to FixRoom by ids.
func (dru *DataRoomUpdate) AddFixIDs(ids ...int) *DataRoomUpdate {
	dru.mutation.AddFixIDs(ids...)
	return dru
}

// AddFixs adds the fixs edges to FixRoom.
func (dru *DataRoomUpdate) AddFixs(f ...*FixRoom) *DataRoomUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dru.AddFixIDs(ids...)
}

// AddDetailIDs adds the details edge to FurnitureDetail by ids.
func (dru *DataRoomUpdate) AddDetailIDs(ids ...int) *DataRoomUpdate {
	dru.mutation.AddDetailIDs(ids...)
	return dru
}

// AddDetails adds the details edges to FurnitureDetail.
func (dru *DataRoomUpdate) AddDetails(f ...*FurnitureDetail) *DataRoomUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dru.AddDetailIDs(ids...)
}

// SetPromotionID sets the promotion edge to Promotion by id.
func (dru *DataRoomUpdate) SetPromotionID(id int) *DataRoomUpdate {
	dru.mutation.SetPromotionID(id)
	return dru
}

// SetNillablePromotionID sets the promotion edge to Promotion by id if the given value is not nil.
func (dru *DataRoomUpdate) SetNillablePromotionID(id *int) *DataRoomUpdate {
	if id != nil {
		dru = dru.SetPromotionID(*id)
	}
	return dru
}

// SetPromotion sets the promotion edge to Promotion.
func (dru *DataRoomUpdate) SetPromotion(p *Promotion) *DataRoomUpdate {
	return dru.SetPromotionID(p.ID)
}

// SetStatusroomID sets the statusroom edge to StatusRoom by id.
func (dru *DataRoomUpdate) SetStatusroomID(id int) *DataRoomUpdate {
	dru.mutation.SetStatusroomID(id)
	return dru
}

// SetNillableStatusroomID sets the statusroom edge to StatusRoom by id if the given value is not nil.
func (dru *DataRoomUpdate) SetNillableStatusroomID(id *int) *DataRoomUpdate {
	if id != nil {
		dru = dru.SetStatusroomID(*id)
	}
	return dru
}

// SetStatusroom sets the statusroom edge to StatusRoom.
func (dru *DataRoomUpdate) SetStatusroom(s *StatusRoom) *DataRoomUpdate {
	return dru.SetStatusroomID(s.ID)
}

// SetTyperoomID sets the typeroom edge to TypeRoom by id.
func (dru *DataRoomUpdate) SetTyperoomID(id int) *DataRoomUpdate {
	dru.mutation.SetTyperoomID(id)
	return dru
}

// SetNillableTyperoomID sets the typeroom edge to TypeRoom by id if the given value is not nil.
func (dru *DataRoomUpdate) SetNillableTyperoomID(id *int) *DataRoomUpdate {
	if id != nil {
		dru = dru.SetTyperoomID(*id)
	}
	return dru
}

// SetTyperoom sets the typeroom edge to TypeRoom.
func (dru *DataRoomUpdate) SetTyperoom(t *TypeRoom) *DataRoomUpdate {
	return dru.SetTyperoomID(t.ID)
}

// Mutation returns the DataRoomMutation object of the builder.
func (dru *DataRoomUpdate) Mutation() *DataRoomMutation {
	return dru.mutation
}

// RemoveReserfIDs removes the reserves edge to ReserveRoom by ids.
func (dru *DataRoomUpdate) RemoveReserfIDs(ids ...int) *DataRoomUpdate {
	dru.mutation.RemoveReserfIDs(ids...)
	return dru
}

// RemoveReserves removes reserves edges to ReserveRoom.
func (dru *DataRoomUpdate) RemoveReserves(r ...*ReserveRoom) *DataRoomUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dru.RemoveReserfIDs(ids...)
}

// RemoveFixIDs removes the fixs edge to FixRoom by ids.
func (dru *DataRoomUpdate) RemoveFixIDs(ids ...int) *DataRoomUpdate {
	dru.mutation.RemoveFixIDs(ids...)
	return dru
}

// RemoveFixs removes fixs edges to FixRoom.
func (dru *DataRoomUpdate) RemoveFixs(f ...*FixRoom) *DataRoomUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dru.RemoveFixIDs(ids...)
}

// RemoveDetailIDs removes the details edge to FurnitureDetail by ids.
func (dru *DataRoomUpdate) RemoveDetailIDs(ids ...int) *DataRoomUpdate {
	dru.mutation.RemoveDetailIDs(ids...)
	return dru
}

// RemoveDetails removes details edges to FurnitureDetail.
func (dru *DataRoomUpdate) RemoveDetails(f ...*FurnitureDetail) *DataRoomUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dru.RemoveDetailIDs(ids...)
}

// ClearPromotion clears the promotion edge to Promotion.
func (dru *DataRoomUpdate) ClearPromotion() *DataRoomUpdate {
	dru.mutation.ClearPromotion()
	return dru
}

// ClearStatusroom clears the statusroom edge to StatusRoom.
func (dru *DataRoomUpdate) ClearStatusroom() *DataRoomUpdate {
	dru.mutation.ClearStatusroom()
	return dru
}

// ClearTyperoom clears the typeroom edge to TypeRoom.
func (dru *DataRoomUpdate) ClearTyperoom() *DataRoomUpdate {
	dru.mutation.ClearTyperoom()
	return dru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (dru *DataRoomUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := dru.mutation.Price(); ok {
		if err := dataroom.PriceValidator(v); err != nil {
			return 0, &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := dru.mutation.Roomnumber(); ok {
		if err := dataroom.RoomnumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "roomnumber", err: fmt.Errorf("ent: validator failed for field \"roomnumber\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(dru.hooks) == 0 {
		affected, err = dru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dru.mutation = mutation
			affected, err = dru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dru.hooks) - 1; i >= 0; i-- {
			mut = dru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DataRoomUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DataRoomUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DataRoomUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DataRoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dataroom.Table,
			Columns: dataroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dataroom.FieldID,
			},
		},
	}
	if ps := dru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dataroom.FieldPrice,
		})
	}
	if value, ok := dru.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dataroom.FieldPrice,
		})
	}
	if value, ok := dru.mutation.Roomnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataroom.FieldRoomnumber,
		})
	}
	if nodes := dru.mutation.RemovedReservesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.ReservesTable,
			Columns: []string{dataroom.ReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reserveroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.ReservesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.ReservesTable,
			Columns: []string{dataroom.ReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reserveroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := dru.mutation.RemovedFixsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.FixsTable,
			Columns: []string{dataroom.FixsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.FixsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.FixsTable,
			Columns: []string{dataroom.FixsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := dru.mutation.RemovedDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.DetailsTable,
			Columns: []string{dataroom.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituredetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.DetailsTable,
			Columns: []string{dataroom.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituredetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.PromotionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.PromotionTable,
			Columns: []string{dataroom.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.PromotionTable,
			Columns: []string{dataroom.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.StatusroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.StatusroomTable,
			Columns: []string{dataroom.StatusroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.StatusroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.StatusroomTable,
			Columns: []string{dataroom.StatusroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.TyperoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.TyperoomTable,
			Columns: []string{dataroom.TyperoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.TyperoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.TyperoomTable,
			Columns: []string{dataroom.TyperoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dataroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DataRoomUpdateOne is the builder for updating a single DataRoom entity.
type DataRoomUpdateOne struct {
	config
	hooks    []Hook
	mutation *DataRoomMutation
}

// SetPrice sets the price field.
func (druo *DataRoomUpdateOne) SetPrice(f float64) *DataRoomUpdateOne {
	druo.mutation.ResetPrice()
	druo.mutation.SetPrice(f)
	return druo
}

// AddPrice adds f to price.
func (druo *DataRoomUpdateOne) AddPrice(f float64) *DataRoomUpdateOne {
	druo.mutation.AddPrice(f)
	return druo
}

// SetRoomnumber sets the roomnumber field.
func (druo *DataRoomUpdateOne) SetRoomnumber(s string) *DataRoomUpdateOne {
	druo.mutation.SetRoomnumber(s)
	return druo
}

// AddReserfIDs adds the reserves edge to ReserveRoom by ids.
func (druo *DataRoomUpdateOne) AddReserfIDs(ids ...int) *DataRoomUpdateOne {
	druo.mutation.AddReserfIDs(ids...)
	return druo
}

// AddReserves adds the reserves edges to ReserveRoom.
func (druo *DataRoomUpdateOne) AddReserves(r ...*ReserveRoom) *DataRoomUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return druo.AddReserfIDs(ids...)
}

// AddFixIDs adds the fixs edge to FixRoom by ids.
func (druo *DataRoomUpdateOne) AddFixIDs(ids ...int) *DataRoomUpdateOne {
	druo.mutation.AddFixIDs(ids...)
	return druo
}

// AddFixs adds the fixs edges to FixRoom.
func (druo *DataRoomUpdateOne) AddFixs(f ...*FixRoom) *DataRoomUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return druo.AddFixIDs(ids...)
}

// AddDetailIDs adds the details edge to FurnitureDetail by ids.
func (druo *DataRoomUpdateOne) AddDetailIDs(ids ...int) *DataRoomUpdateOne {
	druo.mutation.AddDetailIDs(ids...)
	return druo
}

// AddDetails adds the details edges to FurnitureDetail.
func (druo *DataRoomUpdateOne) AddDetails(f ...*FurnitureDetail) *DataRoomUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return druo.AddDetailIDs(ids...)
}

// SetPromotionID sets the promotion edge to Promotion by id.
func (druo *DataRoomUpdateOne) SetPromotionID(id int) *DataRoomUpdateOne {
	druo.mutation.SetPromotionID(id)
	return druo
}

// SetNillablePromotionID sets the promotion edge to Promotion by id if the given value is not nil.
func (druo *DataRoomUpdateOne) SetNillablePromotionID(id *int) *DataRoomUpdateOne {
	if id != nil {
		druo = druo.SetPromotionID(*id)
	}
	return druo
}

// SetPromotion sets the promotion edge to Promotion.
func (druo *DataRoomUpdateOne) SetPromotion(p *Promotion) *DataRoomUpdateOne {
	return druo.SetPromotionID(p.ID)
}

// SetStatusroomID sets the statusroom edge to StatusRoom by id.
func (druo *DataRoomUpdateOne) SetStatusroomID(id int) *DataRoomUpdateOne {
	druo.mutation.SetStatusroomID(id)
	return druo
}

// SetNillableStatusroomID sets the statusroom edge to StatusRoom by id if the given value is not nil.
func (druo *DataRoomUpdateOne) SetNillableStatusroomID(id *int) *DataRoomUpdateOne {
	if id != nil {
		druo = druo.SetStatusroomID(*id)
	}
	return druo
}

// SetStatusroom sets the statusroom edge to StatusRoom.
func (druo *DataRoomUpdateOne) SetStatusroom(s *StatusRoom) *DataRoomUpdateOne {
	return druo.SetStatusroomID(s.ID)
}

// SetTyperoomID sets the typeroom edge to TypeRoom by id.
func (druo *DataRoomUpdateOne) SetTyperoomID(id int) *DataRoomUpdateOne {
	druo.mutation.SetTyperoomID(id)
	return druo
}

// SetNillableTyperoomID sets the typeroom edge to TypeRoom by id if the given value is not nil.
func (druo *DataRoomUpdateOne) SetNillableTyperoomID(id *int) *DataRoomUpdateOne {
	if id != nil {
		druo = druo.SetTyperoomID(*id)
	}
	return druo
}

// SetTyperoom sets the typeroom edge to TypeRoom.
func (druo *DataRoomUpdateOne) SetTyperoom(t *TypeRoom) *DataRoomUpdateOne {
	return druo.SetTyperoomID(t.ID)
}

// Mutation returns the DataRoomMutation object of the builder.
func (druo *DataRoomUpdateOne) Mutation() *DataRoomMutation {
	return druo.mutation
}

// RemoveReserfIDs removes the reserves edge to ReserveRoom by ids.
func (druo *DataRoomUpdateOne) RemoveReserfIDs(ids ...int) *DataRoomUpdateOne {
	druo.mutation.RemoveReserfIDs(ids...)
	return druo
}

// RemoveReserves removes reserves edges to ReserveRoom.
func (druo *DataRoomUpdateOne) RemoveReserves(r ...*ReserveRoom) *DataRoomUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return druo.RemoveReserfIDs(ids...)
}

// RemoveFixIDs removes the fixs edge to FixRoom by ids.
func (druo *DataRoomUpdateOne) RemoveFixIDs(ids ...int) *DataRoomUpdateOne {
	druo.mutation.RemoveFixIDs(ids...)
	return druo
}

// RemoveFixs removes fixs edges to FixRoom.
func (druo *DataRoomUpdateOne) RemoveFixs(f ...*FixRoom) *DataRoomUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return druo.RemoveFixIDs(ids...)
}

// RemoveDetailIDs removes the details edge to FurnitureDetail by ids.
func (druo *DataRoomUpdateOne) RemoveDetailIDs(ids ...int) *DataRoomUpdateOne {
	druo.mutation.RemoveDetailIDs(ids...)
	return druo
}

// RemoveDetails removes details edges to FurnitureDetail.
func (druo *DataRoomUpdateOne) RemoveDetails(f ...*FurnitureDetail) *DataRoomUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return druo.RemoveDetailIDs(ids...)
}

// ClearPromotion clears the promotion edge to Promotion.
func (druo *DataRoomUpdateOne) ClearPromotion() *DataRoomUpdateOne {
	druo.mutation.ClearPromotion()
	return druo
}

// ClearStatusroom clears the statusroom edge to StatusRoom.
func (druo *DataRoomUpdateOne) ClearStatusroom() *DataRoomUpdateOne {
	druo.mutation.ClearStatusroom()
	return druo
}

// ClearTyperoom clears the typeroom edge to TypeRoom.
func (druo *DataRoomUpdateOne) ClearTyperoom() *DataRoomUpdateOne {
	druo.mutation.ClearTyperoom()
	return druo
}

// Save executes the query and returns the updated entity.
func (druo *DataRoomUpdateOne) Save(ctx context.Context) (*DataRoom, error) {
	if v, ok := druo.mutation.Price(); ok {
		if err := dataroom.PriceValidator(v); err != nil {
			return nil, &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := druo.mutation.Roomnumber(); ok {
		if err := dataroom.RoomnumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "roomnumber", err: fmt.Errorf("ent: validator failed for field \"roomnumber\": %w", err)}
		}
	}

	var (
		err  error
		node *DataRoom
	)
	if len(druo.hooks) == 0 {
		node, err = druo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			druo.mutation = mutation
			node, err = druo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(druo.hooks) - 1; i >= 0; i-- {
			mut = druo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, druo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DataRoomUpdateOne) SaveX(ctx context.Context) *DataRoom {
	dr, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return dr
}

// Exec executes the query on the entity.
func (druo *DataRoomUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DataRoomUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DataRoomUpdateOne) sqlSave(ctx context.Context) (dr *DataRoom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dataroom.Table,
			Columns: dataroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dataroom.FieldID,
			},
		},
	}
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DataRoom.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := druo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dataroom.FieldPrice,
		})
	}
	if value, ok := druo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dataroom.FieldPrice,
		})
	}
	if value, ok := druo.mutation.Roomnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataroom.FieldRoomnumber,
		})
	}
	if nodes := druo.mutation.RemovedReservesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.ReservesTable,
			Columns: []string{dataroom.ReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reserveroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.ReservesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.ReservesTable,
			Columns: []string{dataroom.ReservesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reserveroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := druo.mutation.RemovedFixsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.FixsTable,
			Columns: []string{dataroom.FixsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.FixsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.FixsTable,
			Columns: []string{dataroom.FixsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := druo.mutation.RemovedDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.DetailsTable,
			Columns: []string{dataroom.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituredetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataroom.DetailsTable,
			Columns: []string{dataroom.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituredetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.PromotionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.PromotionTable,
			Columns: []string{dataroom.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.PromotionTable,
			Columns: []string{dataroom.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.StatusroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.StatusroomTable,
			Columns: []string{dataroom.StatusroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.StatusroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.StatusroomTable,
			Columns: []string{dataroom.StatusroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.TyperoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.TyperoomTable,
			Columns: []string{dataroom.TyperoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.TyperoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataroom.TyperoomTable,
			Columns: []string{dataroom.TyperoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	dr = &DataRoom{config: druo.config}
	_spec.Assign = dr.assignValues
	_spec.ScanValues = dr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dataroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return dr, nil
}
