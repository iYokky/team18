// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/checkin"
	"github.com/team18/app/ent/checkout"
	"github.com/team18/app/ent/counterstaff"
	"github.com/team18/app/ent/furnituredetail"
)

// CounterStaffCreate is the builder for creating a CounterStaff entity.
type CounterStaffCreate struct {
	config
	mutation *CounterStaffMutation
	hooks    []Hook
}

// SetName sets the name field.
func (csc *CounterStaffCreate) SetName(s string) *CounterStaffCreate {
	csc.mutation.SetName(s)
	return csc
}

// SetEmail sets the email field.
func (csc *CounterStaffCreate) SetEmail(s string) *CounterStaffCreate {
	csc.mutation.SetEmail(s)
	return csc
}

// SetPassword sets the password field.
func (csc *CounterStaffCreate) SetPassword(s string) *CounterStaffCreate {
	csc.mutation.SetPassword(s)
	return csc
}

// AddCheckinIDs adds the checkins edge to CheckIn by ids.
func (csc *CounterStaffCreate) AddCheckinIDs(ids ...int) *CounterStaffCreate {
	csc.mutation.AddCheckinIDs(ids...)
	return csc
}

// AddCheckins adds the checkins edges to CheckIn.
func (csc *CounterStaffCreate) AddCheckins(c ...*CheckIn) *CounterStaffCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csc.AddCheckinIDs(ids...)
}

// AddCheckoutIDs adds the checkouts edge to Checkout by ids.
func (csc *CounterStaffCreate) AddCheckoutIDs(ids ...int) *CounterStaffCreate {
	csc.mutation.AddCheckoutIDs(ids...)
	return csc
}

// AddCheckouts adds the checkouts edges to Checkout.
func (csc *CounterStaffCreate) AddCheckouts(c ...*Checkout) *CounterStaffCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csc.AddCheckoutIDs(ids...)
}

// AddDetailIDs adds the details edge to FurnitureDetail by ids.
func (csc *CounterStaffCreate) AddDetailIDs(ids ...int) *CounterStaffCreate {
	csc.mutation.AddDetailIDs(ids...)
	return csc
}

// AddDetails adds the details edges to FurnitureDetail.
func (csc *CounterStaffCreate) AddDetails(f ...*FurnitureDetail) *CounterStaffCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return csc.AddDetailIDs(ids...)
}

// Mutation returns the CounterStaffMutation object of the builder.
func (csc *CounterStaffCreate) Mutation() *CounterStaffMutation {
	return csc.mutation
}

// Save creates the CounterStaff in the database.
func (csc *CounterStaffCreate) Save(ctx context.Context) (*CounterStaff, error) {
	if _, ok := csc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := csc.mutation.Name(); ok {
		if err := counterstaff.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := csc.mutation.Email(); !ok {
		return nil, &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if v, ok := csc.mutation.Email(); ok {
		if err := counterstaff.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if _, ok := csc.mutation.Password(); !ok {
		return nil, &ValidationError{Name: "password", err: errors.New("ent: missing required field \"password\"")}
	}
	if v, ok := csc.mutation.Password(); ok {
		if err := counterstaff.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	var (
		err  error
		node *CounterStaff
	)
	if len(csc.hooks) == 0 {
		node, err = csc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterStaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csc.mutation = mutation
			node, err = csc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csc.hooks) - 1; i >= 0; i-- {
			mut = csc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CounterStaffCreate) SaveX(ctx context.Context) *CounterStaff {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (csc *CounterStaffCreate) sqlSave(ctx context.Context) (*CounterStaff, error) {
	cs, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	cs.ID = int(id)
	return cs, nil
}

func (csc *CounterStaffCreate) createSpec() (*CounterStaff, *sqlgraph.CreateSpec) {
	var (
		cs    = &CounterStaff{config: csc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: counterstaff.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counterstaff.FieldID,
			},
		}
	)
	if value, ok := csc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterstaff.FieldName,
		})
		cs.Name = value
	}
	if value, ok := csc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterstaff.FieldEmail,
		})
		cs.Email = value
	}
	if value, ok := csc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterstaff.FieldPassword,
		})
		cs.Password = value
	}
	if nodes := csc.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.CheckinsTable,
			Columns: []string{counterstaff.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.CheckoutsTable,
			Columns: []string{counterstaff.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.DetailsTable,
			Columns: []string{counterstaff.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituredetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return cs, _spec
}
