// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/checkin"
	"github.com/team18/app/ent/predicate"
	"github.com/team18/app/ent/statuscheckin"
)

// StatusCheckInUpdate is the builder for updating StatusCheckIn entities.
type StatusCheckInUpdate struct {
	config
	hooks      []Hook
	mutation   *StatusCheckInMutation
	predicates []predicate.StatusCheckIn
}

// Where adds a new predicate for the builder.
func (sciu *StatusCheckInUpdate) Where(ps ...predicate.StatusCheckIn) *StatusCheckInUpdate {
	sciu.predicates = append(sciu.predicates, ps...)
	return sciu
}

// SetStatusName sets the status_name field.
func (sciu *StatusCheckInUpdate) SetStatusName(s string) *StatusCheckInUpdate {
	sciu.mutation.SetStatusName(s)
	return sciu
}

// AddCheckinIDs adds the checkins edge to CheckIn by ids.
func (sciu *StatusCheckInUpdate) AddCheckinIDs(ids ...int) *StatusCheckInUpdate {
	sciu.mutation.AddCheckinIDs(ids...)
	return sciu
}

// AddCheckins adds the checkins edges to CheckIn.
func (sciu *StatusCheckInUpdate) AddCheckins(c ...*CheckIn) *StatusCheckInUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sciu.AddCheckinIDs(ids...)
}

// Mutation returns the StatusCheckInMutation object of the builder.
func (sciu *StatusCheckInUpdate) Mutation() *StatusCheckInMutation {
	return sciu.mutation
}

// RemoveCheckinIDs removes the checkins edge to CheckIn by ids.
func (sciu *StatusCheckInUpdate) RemoveCheckinIDs(ids ...int) *StatusCheckInUpdate {
	sciu.mutation.RemoveCheckinIDs(ids...)
	return sciu
}

// RemoveCheckins removes checkins edges to CheckIn.
func (sciu *StatusCheckInUpdate) RemoveCheckins(c ...*CheckIn) *StatusCheckInUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sciu.RemoveCheckinIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (sciu *StatusCheckInUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := sciu.mutation.StatusName(); ok {
		if err := statuscheckin.StatusNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "status_name", err: fmt.Errorf("ent: validator failed for field \"status_name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(sciu.hooks) == 0 {
		affected, err = sciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusCheckInMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sciu.mutation = mutation
			affected, err = sciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sciu.hooks) - 1; i >= 0; i-- {
			mut = sciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sciu *StatusCheckInUpdate) SaveX(ctx context.Context) int {
	affected, err := sciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sciu *StatusCheckInUpdate) Exec(ctx context.Context) error {
	_, err := sciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sciu *StatusCheckInUpdate) ExecX(ctx context.Context) {
	if err := sciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sciu *StatusCheckInUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statuscheckin.Table,
			Columns: statuscheckin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statuscheckin.FieldID,
			},
		},
	}
	if ps := sciu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sciu.mutation.StatusName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statuscheckin.FieldStatusName,
		})
	}
	if nodes := sciu.mutation.RemovedCheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statuscheckin.CheckinsTable,
			Columns: []string{statuscheckin.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sciu.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statuscheckin.CheckinsTable,
			Columns: []string{statuscheckin.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statuscheckin.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StatusCheckInUpdateOne is the builder for updating a single StatusCheckIn entity.
type StatusCheckInUpdateOne struct {
	config
	hooks    []Hook
	mutation *StatusCheckInMutation
}

// SetStatusName sets the status_name field.
func (sciuo *StatusCheckInUpdateOne) SetStatusName(s string) *StatusCheckInUpdateOne {
	sciuo.mutation.SetStatusName(s)
	return sciuo
}

// AddCheckinIDs adds the checkins edge to CheckIn by ids.
func (sciuo *StatusCheckInUpdateOne) AddCheckinIDs(ids ...int) *StatusCheckInUpdateOne {
	sciuo.mutation.AddCheckinIDs(ids...)
	return sciuo
}

// AddCheckins adds the checkins edges to CheckIn.
func (sciuo *StatusCheckInUpdateOne) AddCheckins(c ...*CheckIn) *StatusCheckInUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sciuo.AddCheckinIDs(ids...)
}

// Mutation returns the StatusCheckInMutation object of the builder.
func (sciuo *StatusCheckInUpdateOne) Mutation() *StatusCheckInMutation {
	return sciuo.mutation
}

// RemoveCheckinIDs removes the checkins edge to CheckIn by ids.
func (sciuo *StatusCheckInUpdateOne) RemoveCheckinIDs(ids ...int) *StatusCheckInUpdateOne {
	sciuo.mutation.RemoveCheckinIDs(ids...)
	return sciuo
}

// RemoveCheckins removes checkins edges to CheckIn.
func (sciuo *StatusCheckInUpdateOne) RemoveCheckins(c ...*CheckIn) *StatusCheckInUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sciuo.RemoveCheckinIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (sciuo *StatusCheckInUpdateOne) Save(ctx context.Context) (*StatusCheckIn, error) {
	if v, ok := sciuo.mutation.StatusName(); ok {
		if err := statuscheckin.StatusNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "status_name", err: fmt.Errorf("ent: validator failed for field \"status_name\": %w", err)}
		}
	}

	var (
		err  error
		node *StatusCheckIn
	)
	if len(sciuo.hooks) == 0 {
		node, err = sciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusCheckInMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sciuo.mutation = mutation
			node, err = sciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sciuo.hooks) - 1; i >= 0; i-- {
			mut = sciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sciuo *StatusCheckInUpdateOne) SaveX(ctx context.Context) *StatusCheckIn {
	sci, err := sciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return sci
}

// Exec executes the query on the entity.
func (sciuo *StatusCheckInUpdateOne) Exec(ctx context.Context) error {
	_, err := sciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sciuo *StatusCheckInUpdateOne) ExecX(ctx context.Context) {
	if err := sciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sciuo *StatusCheckInUpdateOne) sqlSave(ctx context.Context) (sci *StatusCheckIn, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statuscheckin.Table,
			Columns: statuscheckin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statuscheckin.FieldID,
			},
		},
	}
	id, ok := sciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StatusCheckIn.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := sciuo.mutation.StatusName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statuscheckin.FieldStatusName,
		})
	}
	if nodes := sciuo.mutation.RemovedCheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statuscheckin.CheckinsTable,
			Columns: []string{statuscheckin.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sciuo.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statuscheckin.CheckinsTable,
			Columns: []string{statuscheckin.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	sci = &StatusCheckIn{config: sciuo.config}
	_spec.Assign = sci.assignValues
	_spec.ScanValues = sci.scanValues()
	if err = sqlgraph.UpdateNode(ctx, sciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statuscheckin.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return sci, nil
}
