// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team18/app/ent/furnituretype"
)

// FurnitureType is the model entity for the FurnitureType schema.
type FurnitureType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FurnitureType holds the value of the "furniture_type" field.
	FurnitureType string `json:"furniture_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FurnitureTypeQuery when eager-loading is set.
	Edges FurnitureTypeEdges `json:"edges"`
}

// FurnitureTypeEdges holds the relations/edges for other nodes in the graph.
type FurnitureTypeEdges struct {
	// Details holds the value of the details edge.
	Details []*FurnitureDetail
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DetailsOrErr returns the Details value or an error if the edge
// was not loaded in eager-loading.
func (e FurnitureTypeEdges) DetailsOrErr() ([]*FurnitureDetail, error) {
	if e.loadedTypes[0] {
		return e.Details, nil
	}
	return nil, &NotLoadedError{edge: "details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FurnitureType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // furniture_type
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FurnitureType fields.
func (ft *FurnitureType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(furnituretype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ft.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field furniture_type", values[0])
	} else if value.Valid {
		ft.FurnitureType = value.String
	}
	return nil
}

// QueryDetails queries the details edge of the FurnitureType.
func (ft *FurnitureType) QueryDetails() *FurnitureDetailQuery {
	return (&FurnitureTypeClient{config: ft.config}).QueryDetails(ft)
}

// Update returns a builder for updating this FurnitureType.
// Note that, you need to call FurnitureType.Unwrap() before calling this method, if this FurnitureType
// was returned from a transaction, and the transaction was committed or rolled back.
func (ft *FurnitureType) Update() *FurnitureTypeUpdateOne {
	return (&FurnitureTypeClient{config: ft.config}).UpdateOne(ft)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ft *FurnitureType) Unwrap() *FurnitureType {
	tx, ok := ft.config.driver.(*txDriver)
	if !ok {
		panic("ent: FurnitureType is not a transactional entity")
	}
	ft.config.driver = tx.drv
	return ft
}

// String implements the fmt.Stringer.
func (ft *FurnitureType) String() string {
	var builder strings.Builder
	builder.WriteString("FurnitureType(")
	builder.WriteString(fmt.Sprintf("id=%v", ft.ID))
	builder.WriteString(", furniture_type=")
	builder.WriteString(ft.FurnitureType)
	builder.WriteByte(')')
	return builder.String()
}

// FurnitureTypes is a parsable slice of FurnitureType.
type FurnitureTypes []*FurnitureType

func (ft FurnitureTypes) config(cfg config) {
	for _i := range ft {
		ft[_i].config = cfg
	}
}
