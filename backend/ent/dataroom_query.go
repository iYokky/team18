// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/checkin"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/fixroom"
	"github.com/team18/app/ent/furnituredetail"
	"github.com/team18/app/ent/predicate"
	"github.com/team18/app/ent/promotion"
	"github.com/team18/app/ent/reserveroom"
	"github.com/team18/app/ent/statusroom"
	"github.com/team18/app/ent/typeroom"
)

// DataRoomQuery is the builder for querying DataRoom entities.
type DataRoomQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.DataRoom
	// eager-loading edges.
	withReserves   *ReserveRoomQuery
	withFixs       *FixRoomQuery
	withDetails    *FurnitureDetailQuery
	withCheckins   *CheckInQuery
	withPromotion  *PromotionQuery
	withStatusroom *StatusRoomQuery
	withTyperoom   *TypeRoomQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (drq *DataRoomQuery) Where(ps ...predicate.DataRoom) *DataRoomQuery {
	drq.predicates = append(drq.predicates, ps...)
	return drq
}

// Limit adds a limit step to the query.
func (drq *DataRoomQuery) Limit(limit int) *DataRoomQuery {
	drq.limit = &limit
	return drq
}

// Offset adds an offset step to the query.
func (drq *DataRoomQuery) Offset(offset int) *DataRoomQuery {
	drq.offset = &offset
	return drq
}

// Order adds an order step to the query.
func (drq *DataRoomQuery) Order(o ...OrderFunc) *DataRoomQuery {
	drq.order = append(drq.order, o...)
	return drq
}

// QueryReserves chains the current query on the reserves edge.
func (drq *DataRoomQuery) QueryReserves() *ReserveRoomQuery {
	query := &ReserveRoomQuery{config: drq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, drq.sqlQuery()),
			sqlgraph.To(reserveroom.Table, reserveroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dataroom.ReservesTable, dataroom.ReservesColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFixs chains the current query on the fixs edge.
func (drq *DataRoomQuery) QueryFixs() *FixRoomQuery {
	query := &FixRoomQuery{config: drq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, drq.sqlQuery()),
			sqlgraph.To(fixroom.Table, fixroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dataroom.FixsTable, dataroom.FixsColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDetails chains the current query on the details edge.
func (drq *DataRoomQuery) QueryDetails() *FurnitureDetailQuery {
	query := &FurnitureDetailQuery{config: drq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, drq.sqlQuery()),
			sqlgraph.To(furnituredetail.Table, furnituredetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dataroom.DetailsTable, dataroom.DetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCheckins chains the current query on the checkins edge.
func (drq *DataRoomQuery) QueryCheckins() *CheckInQuery {
	query := &CheckInQuery{config: drq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, drq.sqlQuery()),
			sqlgraph.To(checkin.Table, checkin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dataroom.CheckinsTable, dataroom.CheckinsColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPromotion chains the current query on the promotion edge.
func (drq *DataRoomQuery) QueryPromotion() *PromotionQuery {
	query := &PromotionQuery{config: drq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, drq.sqlQuery()),
			sqlgraph.To(promotion.Table, promotion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dataroom.PromotionTable, dataroom.PromotionColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatusroom chains the current query on the statusroom edge.
func (drq *DataRoomQuery) QueryStatusroom() *StatusRoomQuery {
	query := &StatusRoomQuery{config: drq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, drq.sqlQuery()),
			sqlgraph.To(statusroom.Table, statusroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dataroom.StatusroomTable, dataroom.StatusroomColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTyperoom chains the current query on the typeroom edge.
func (drq *DataRoomQuery) QueryTyperoom() *TypeRoomQuery {
	query := &TypeRoomQuery{config: drq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, drq.sqlQuery()),
			sqlgraph.To(typeroom.Table, typeroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dataroom.TyperoomTable, dataroom.TyperoomColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DataRoom entity in the query. Returns *NotFoundError when no dataroom was found.
func (drq *DataRoomQuery) First(ctx context.Context) (*DataRoom, error) {
	drs, err := drq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(drs) == 0 {
		return nil, &NotFoundError{dataroom.Label}
	}
	return drs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (drq *DataRoomQuery) FirstX(ctx context.Context) *DataRoom {
	dr, err := drq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return dr
}

// FirstID returns the first DataRoom id in the query. Returns *NotFoundError when no id was found.
func (drq *DataRoomQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = drq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dataroom.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (drq *DataRoomQuery) FirstXID(ctx context.Context) int {
	id, err := drq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only DataRoom entity in the query, returns an error if not exactly one entity was returned.
func (drq *DataRoomQuery) Only(ctx context.Context) (*DataRoom, error) {
	drs, err := drq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(drs) {
	case 1:
		return drs[0], nil
	case 0:
		return nil, &NotFoundError{dataroom.Label}
	default:
		return nil, &NotSingularError{dataroom.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (drq *DataRoomQuery) OnlyX(ctx context.Context) *DataRoom {
	dr, err := drq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return dr
}

// OnlyID returns the only DataRoom id in the query, returns an error if not exactly one id was returned.
func (drq *DataRoomQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = drq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dataroom.Label}
	default:
		err = &NotSingularError{dataroom.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (drq *DataRoomQuery) OnlyIDX(ctx context.Context) int {
	id, err := drq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DataRooms.
func (drq *DataRoomQuery) All(ctx context.Context) ([]*DataRoom, error) {
	if err := drq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return drq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (drq *DataRoomQuery) AllX(ctx context.Context) []*DataRoom {
	drs, err := drq.All(ctx)
	if err != nil {
		panic(err)
	}
	return drs
}

// IDs executes the query and returns a list of DataRoom ids.
func (drq *DataRoomQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := drq.Select(dataroom.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (drq *DataRoomQuery) IDsX(ctx context.Context) []int {
	ids, err := drq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (drq *DataRoomQuery) Count(ctx context.Context) (int, error) {
	if err := drq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return drq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (drq *DataRoomQuery) CountX(ctx context.Context) int {
	count, err := drq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (drq *DataRoomQuery) Exist(ctx context.Context) (bool, error) {
	if err := drq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return drq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (drq *DataRoomQuery) ExistX(ctx context.Context) bool {
	exist, err := drq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (drq *DataRoomQuery) Clone() *DataRoomQuery {
	return &DataRoomQuery{
		config:     drq.config,
		limit:      drq.limit,
		offset:     drq.offset,
		order:      append([]OrderFunc{}, drq.order...),
		unique:     append([]string{}, drq.unique...),
		predicates: append([]predicate.DataRoom{}, drq.predicates...),
		// clone intermediate query.
		sql:  drq.sql.Clone(),
		path: drq.path,
	}
}

//  WithReserves tells the query-builder to eager-loads the nodes that are connected to
// the "reserves" edge. The optional arguments used to configure the query builder of the edge.
func (drq *DataRoomQuery) WithReserves(opts ...func(*ReserveRoomQuery)) *DataRoomQuery {
	query := &ReserveRoomQuery{config: drq.config}
	for _, opt := range opts {
		opt(query)
	}
	drq.withReserves = query
	return drq
}

//  WithFixs tells the query-builder to eager-loads the nodes that are connected to
// the "fixs" edge. The optional arguments used to configure the query builder of the edge.
func (drq *DataRoomQuery) WithFixs(opts ...func(*FixRoomQuery)) *DataRoomQuery {
	query := &FixRoomQuery{config: drq.config}
	for _, opt := range opts {
		opt(query)
	}
	drq.withFixs = query
	return drq
}

//  WithDetails tells the query-builder to eager-loads the nodes that are connected to
// the "details" edge. The optional arguments used to configure the query builder of the edge.
func (drq *DataRoomQuery) WithDetails(opts ...func(*FurnitureDetailQuery)) *DataRoomQuery {
	query := &FurnitureDetailQuery{config: drq.config}
	for _, opt := range opts {
		opt(query)
	}
	drq.withDetails = query
	return drq
}

//  WithCheckins tells the query-builder to eager-loads the nodes that are connected to
// the "checkins" edge. The optional arguments used to configure the query builder of the edge.
func (drq *DataRoomQuery) WithCheckins(opts ...func(*CheckInQuery)) *DataRoomQuery {
	query := &CheckInQuery{config: drq.config}
	for _, opt := range opts {
		opt(query)
	}
	drq.withCheckins = query
	return drq
}

//  WithPromotion tells the query-builder to eager-loads the nodes that are connected to
// the "promotion" edge. The optional arguments used to configure the query builder of the edge.
func (drq *DataRoomQuery) WithPromotion(opts ...func(*PromotionQuery)) *DataRoomQuery {
	query := &PromotionQuery{config: drq.config}
	for _, opt := range opts {
		opt(query)
	}
	drq.withPromotion = query
	return drq
}

//  WithStatusroom tells the query-builder to eager-loads the nodes that are connected to
// the "statusroom" edge. The optional arguments used to configure the query builder of the edge.
func (drq *DataRoomQuery) WithStatusroom(opts ...func(*StatusRoomQuery)) *DataRoomQuery {
	query := &StatusRoomQuery{config: drq.config}
	for _, opt := range opts {
		opt(query)
	}
	drq.withStatusroom = query
	return drq
}

//  WithTyperoom tells the query-builder to eager-loads the nodes that are connected to
// the "typeroom" edge. The optional arguments used to configure the query builder of the edge.
func (drq *DataRoomQuery) WithTyperoom(opts ...func(*TypeRoomQuery)) *DataRoomQuery {
	query := &TypeRoomQuery{config: drq.config}
	for _, opt := range opts {
		opt(query)
	}
	drq.withTyperoom = query
	return drq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Price float64 `json:"price,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DataRoom.Query().
//		GroupBy(dataroom.FieldPrice).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (drq *DataRoomQuery) GroupBy(field string, fields ...string) *DataRoomGroupBy {
	group := &DataRoomGroupBy{config: drq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return drq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Price float64 `json:"price,omitempty"`
//	}
//
//	client.DataRoom.Query().
//		Select(dataroom.FieldPrice).
//		Scan(ctx, &v)
//
func (drq *DataRoomQuery) Select(field string, fields ...string) *DataRoomSelect {
	selector := &DataRoomSelect{config: drq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return drq.sqlQuery(), nil
	}
	return selector
}

func (drq *DataRoomQuery) prepareQuery(ctx context.Context) error {
	if drq.path != nil {
		prev, err := drq.path(ctx)
		if err != nil {
			return err
		}
		drq.sql = prev
	}
	return nil
}

func (drq *DataRoomQuery) sqlAll(ctx context.Context) ([]*DataRoom, error) {
	var (
		nodes       = []*DataRoom{}
		withFKs     = drq.withFKs
		_spec       = drq.querySpec()
		loadedTypes = [7]bool{
			drq.withReserves != nil,
			drq.withFixs != nil,
			drq.withDetails != nil,
			drq.withCheckins != nil,
			drq.withPromotion != nil,
			drq.withStatusroom != nil,
			drq.withTyperoom != nil,
		}
	)
	if drq.withPromotion != nil || drq.withStatusroom != nil || drq.withTyperoom != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, dataroom.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &DataRoom{config: drq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, drq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := drq.withReserves; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*DataRoom)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.ReserveRoom(func(s *sql.Selector) {
			s.Where(sql.InValues(dataroom.ReservesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.room_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "room_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "room_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Reserves = append(node.Edges.Reserves, n)
		}
	}

	if query := drq.withFixs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*DataRoom)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.FixRoom(func(s *sql.Selector) {
			s.Where(sql.InValues(dataroom.FixsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.room_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "room_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "room_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Fixs = append(node.Edges.Fixs, n)
		}
	}

	if query := drq.withDetails; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*DataRoom)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.FurnitureDetail(func(s *sql.Selector) {
			s.Where(sql.InValues(dataroom.DetailsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.room_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "room_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "room_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Details = append(node.Edges.Details, n)
		}
	}

	if query := drq.withCheckins; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*DataRoom)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.CheckIn(func(s *sql.Selector) {
			s.Where(sql.InValues(dataroom.CheckinsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.room_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "room_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "room_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Checkins = append(node.Edges.Checkins, n)
		}
	}

	if query := drq.withPromotion; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DataRoom)
		for i := range nodes {
			if fk := nodes[i].promotion_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(promotion.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "promotion_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Promotion = n
			}
		}
	}

	if query := drq.withStatusroom; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DataRoom)
		for i := range nodes {
			if fk := nodes[i].statusroom_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(statusroom.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "statusroom_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Statusroom = n
			}
		}
	}

	if query := drq.withTyperoom; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DataRoom)
		for i := range nodes {
			if fk := nodes[i].typeroom_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(typeroom.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "typeroom_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Typeroom = n
			}
		}
	}

	return nodes, nil
}

func (drq *DataRoomQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := drq.querySpec()
	return sqlgraph.CountNodes(ctx, drq.driver, _spec)
}

func (drq *DataRoomQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := drq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (drq *DataRoomQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dataroom.Table,
			Columns: dataroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dataroom.FieldID,
			},
		},
		From:   drq.sql,
		Unique: true,
	}
	if ps := drq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := drq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := drq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := drq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (drq *DataRoomQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(drq.driver.Dialect())
	t1 := builder.Table(dataroom.Table)
	selector := builder.Select(t1.Columns(dataroom.Columns...)...).From(t1)
	if drq.sql != nil {
		selector = drq.sql
		selector.Select(selector.Columns(dataroom.Columns...)...)
	}
	for _, p := range drq.predicates {
		p(selector)
	}
	for _, p := range drq.order {
		p(selector)
	}
	if offset := drq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := drq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DataRoomGroupBy is the builder for group-by DataRoom entities.
type DataRoomGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (drgb *DataRoomGroupBy) Aggregate(fns ...AggregateFunc) *DataRoomGroupBy {
	drgb.fns = append(drgb.fns, fns...)
	return drgb
}

// Scan applies the group-by query and scan the result into the given value.
func (drgb *DataRoomGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := drgb.path(ctx)
	if err != nil {
		return err
	}
	drgb.sql = query
	return drgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (drgb *DataRoomGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := drgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (drgb *DataRoomGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(drgb.fields) > 1 {
		return nil, errors.New("ent: DataRoomGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := drgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (drgb *DataRoomGroupBy) StringsX(ctx context.Context) []string {
	v, err := drgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (drgb *DataRoomGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = drgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dataroom.Label}
	default:
		err = fmt.Errorf("ent: DataRoomGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (drgb *DataRoomGroupBy) StringX(ctx context.Context) string {
	v, err := drgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (drgb *DataRoomGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(drgb.fields) > 1 {
		return nil, errors.New("ent: DataRoomGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := drgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (drgb *DataRoomGroupBy) IntsX(ctx context.Context) []int {
	v, err := drgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (drgb *DataRoomGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = drgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dataroom.Label}
	default:
		err = fmt.Errorf("ent: DataRoomGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (drgb *DataRoomGroupBy) IntX(ctx context.Context) int {
	v, err := drgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (drgb *DataRoomGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(drgb.fields) > 1 {
		return nil, errors.New("ent: DataRoomGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := drgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (drgb *DataRoomGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := drgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (drgb *DataRoomGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = drgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dataroom.Label}
	default:
		err = fmt.Errorf("ent: DataRoomGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (drgb *DataRoomGroupBy) Float64X(ctx context.Context) float64 {
	v, err := drgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (drgb *DataRoomGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(drgb.fields) > 1 {
		return nil, errors.New("ent: DataRoomGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := drgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (drgb *DataRoomGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := drgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (drgb *DataRoomGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = drgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dataroom.Label}
	default:
		err = fmt.Errorf("ent: DataRoomGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (drgb *DataRoomGroupBy) BoolX(ctx context.Context) bool {
	v, err := drgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (drgb *DataRoomGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := drgb.sqlQuery().Query()
	if err := drgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (drgb *DataRoomGroupBy) sqlQuery() *sql.Selector {
	selector := drgb.sql
	columns := make([]string, 0, len(drgb.fields)+len(drgb.fns))
	columns = append(columns, drgb.fields...)
	for _, fn := range drgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(drgb.fields...)
}

// DataRoomSelect is the builder for select fields of DataRoom entities.
type DataRoomSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (drs *DataRoomSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := drs.path(ctx)
	if err != nil {
		return err
	}
	drs.sql = query
	return drs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (drs *DataRoomSelect) ScanX(ctx context.Context, v interface{}) {
	if err := drs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (drs *DataRoomSelect) Strings(ctx context.Context) ([]string, error) {
	if len(drs.fields) > 1 {
		return nil, errors.New("ent: DataRoomSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := drs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (drs *DataRoomSelect) StringsX(ctx context.Context) []string {
	v, err := drs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (drs *DataRoomSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = drs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dataroom.Label}
	default:
		err = fmt.Errorf("ent: DataRoomSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (drs *DataRoomSelect) StringX(ctx context.Context) string {
	v, err := drs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (drs *DataRoomSelect) Ints(ctx context.Context) ([]int, error) {
	if len(drs.fields) > 1 {
		return nil, errors.New("ent: DataRoomSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := drs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (drs *DataRoomSelect) IntsX(ctx context.Context) []int {
	v, err := drs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (drs *DataRoomSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = drs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dataroom.Label}
	default:
		err = fmt.Errorf("ent: DataRoomSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (drs *DataRoomSelect) IntX(ctx context.Context) int {
	v, err := drs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (drs *DataRoomSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(drs.fields) > 1 {
		return nil, errors.New("ent: DataRoomSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := drs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (drs *DataRoomSelect) Float64sX(ctx context.Context) []float64 {
	v, err := drs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (drs *DataRoomSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = drs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dataroom.Label}
	default:
		err = fmt.Errorf("ent: DataRoomSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (drs *DataRoomSelect) Float64X(ctx context.Context) float64 {
	v, err := drs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (drs *DataRoomSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(drs.fields) > 1 {
		return nil, errors.New("ent: DataRoomSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := drs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (drs *DataRoomSelect) BoolsX(ctx context.Context) []bool {
	v, err := drs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (drs *DataRoomSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = drs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dataroom.Label}
	default:
		err = fmt.Errorf("ent: DataRoomSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (drs *DataRoomSelect) BoolX(ctx context.Context) bool {
	v, err := drs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (drs *DataRoomSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := drs.sqlQuery().Query()
	if err := drs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (drs *DataRoomSelect) sqlQuery() sql.Querier {
	selector := drs.sql
	selector.Select(selector.Columns(drs.fields...)...)
	return selector
}
