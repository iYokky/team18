// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/promotion"
	"github.com/team18/app/ent/statusroom"
	"github.com/team18/app/ent/typeroom"
)

// DataRoom is the model entity for the DataRoom schema.
type DataRoom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Roomnumber holds the value of the "roomnumber" field.
	Roomnumber string `json:"roomnumber,omitempty"`
	// Roomdetail holds the value of the "roomdetail" field.
	Roomdetail string `json:"roomdetail,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DataRoomQuery when eager-loading is set.
	Edges         DataRoomEdges `json:"edges"`
	promotion_id  *int
	statusroom_id *int
	typeroom_id   *int
}

// DataRoomEdges holds the relations/edges for other nodes in the graph.
type DataRoomEdges struct {
	// Reserves holds the value of the reserves edge.
	Reserves []*ReserveRoom
	// Fixs holds the value of the fixs edge.
	Fixs []*FixRoom
	// Details holds the value of the details edge.
	Details []*FurnitureDetail
	// Checkins holds the value of the checkins edge.
	Checkins []*CheckIn
	// Promotion holds the value of the promotion edge.
	Promotion *Promotion
	// Statusroom holds the value of the statusroom edge.
	Statusroom *StatusRoom
	// Typeroom holds the value of the typeroom edge.
	Typeroom *TypeRoom
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// ReservesOrErr returns the Reserves value or an error if the edge
// was not loaded in eager-loading.
func (e DataRoomEdges) ReservesOrErr() ([]*ReserveRoom, error) {
	if e.loadedTypes[0] {
		return e.Reserves, nil
	}
	return nil, &NotLoadedError{edge: "reserves"}
}

// FixsOrErr returns the Fixs value or an error if the edge
// was not loaded in eager-loading.
func (e DataRoomEdges) FixsOrErr() ([]*FixRoom, error) {
	if e.loadedTypes[1] {
		return e.Fixs, nil
	}
	return nil, &NotLoadedError{edge: "fixs"}
}

// DetailsOrErr returns the Details value or an error if the edge
// was not loaded in eager-loading.
func (e DataRoomEdges) DetailsOrErr() ([]*FurnitureDetail, error) {
	if e.loadedTypes[2] {
		return e.Details, nil
	}
	return nil, &NotLoadedError{edge: "details"}
}

// CheckinsOrErr returns the Checkins value or an error if the edge
// was not loaded in eager-loading.
func (e DataRoomEdges) CheckinsOrErr() ([]*CheckIn, error) {
	if e.loadedTypes[3] {
		return e.Checkins, nil
	}
	return nil, &NotLoadedError{edge: "checkins"}
}

// PromotionOrErr returns the Promotion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DataRoomEdges) PromotionOrErr() (*Promotion, error) {
	if e.loadedTypes[4] {
		if e.Promotion == nil {
			// The edge promotion was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: promotion.Label}
		}
		return e.Promotion, nil
	}
	return nil, &NotLoadedError{edge: "promotion"}
}

// StatusroomOrErr returns the Statusroom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DataRoomEdges) StatusroomOrErr() (*StatusRoom, error) {
	if e.loadedTypes[5] {
		if e.Statusroom == nil {
			// The edge statusroom was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusroom.Label}
		}
		return e.Statusroom, nil
	}
	return nil, &NotLoadedError{edge: "statusroom"}
}

// TyperoomOrErr returns the Typeroom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DataRoomEdges) TyperoomOrErr() (*TypeRoom, error) {
	if e.loadedTypes[6] {
		if e.Typeroom == nil {
			// The edge typeroom was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: typeroom.Label}
		}
		return e.Typeroom, nil
	}
	return nil, &NotLoadedError{edge: "typeroom"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DataRoom) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullFloat64{}, // price
		&sql.NullString{},  // roomnumber
		&sql.NullString{},  // roomdetail
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*DataRoom) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // promotion_id
		&sql.NullInt64{}, // statusroom_id
		&sql.NullInt64{}, // typeroom_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DataRoom fields.
func (dr *DataRoom) assignValues(values ...interface{}) error {
	if m, n := len(values), len(dataroom.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	dr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field price", values[0])
	} else if value.Valid {
		dr.Price = value.Float64
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field roomnumber", values[1])
	} else if value.Valid {
		dr.Roomnumber = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field roomdetail", values[2])
	} else if value.Valid {
		dr.Roomdetail = value.String
	}
	values = values[3:]
	if len(values) == len(dataroom.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field promotion_id", value)
		} else if value.Valid {
			dr.promotion_id = new(int)
			*dr.promotion_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field statusroom_id", value)
		} else if value.Valid {
			dr.statusroom_id = new(int)
			*dr.statusroom_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field typeroom_id", value)
		} else if value.Valid {
			dr.typeroom_id = new(int)
			*dr.typeroom_id = int(value.Int64)
		}
	}
	return nil
}

// QueryReserves queries the reserves edge of the DataRoom.
func (dr *DataRoom) QueryReserves() *ReserveRoomQuery {
	return (&DataRoomClient{config: dr.config}).QueryReserves(dr)
}

// QueryFixs queries the fixs edge of the DataRoom.
func (dr *DataRoom) QueryFixs() *FixRoomQuery {
	return (&DataRoomClient{config: dr.config}).QueryFixs(dr)
}

// QueryDetails queries the details edge of the DataRoom.
func (dr *DataRoom) QueryDetails() *FurnitureDetailQuery {
	return (&DataRoomClient{config: dr.config}).QueryDetails(dr)
}

// QueryCheckins queries the checkins edge of the DataRoom.
func (dr *DataRoom) QueryCheckins() *CheckInQuery {
	return (&DataRoomClient{config: dr.config}).QueryCheckins(dr)
}

// QueryPromotion queries the promotion edge of the DataRoom.
func (dr *DataRoom) QueryPromotion() *PromotionQuery {
	return (&DataRoomClient{config: dr.config}).QueryPromotion(dr)
}

// QueryStatusroom queries the statusroom edge of the DataRoom.
func (dr *DataRoom) QueryStatusroom() *StatusRoomQuery {
	return (&DataRoomClient{config: dr.config}).QueryStatusroom(dr)
}

// QueryTyperoom queries the typeroom edge of the DataRoom.
func (dr *DataRoom) QueryTyperoom() *TypeRoomQuery {
	return (&DataRoomClient{config: dr.config}).QueryTyperoom(dr)
}

// Update returns a builder for updating this DataRoom.
// Note that, you need to call DataRoom.Unwrap() before calling this method, if this DataRoom
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DataRoom) Update() *DataRoomUpdateOne {
	return (&DataRoomClient{config: dr.config}).UpdateOne(dr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (dr *DataRoom) Unwrap() *DataRoom {
	tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DataRoom is not a transactional entity")
	}
	dr.config.driver = tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DataRoom) String() string {
	var builder strings.Builder
	builder.WriteString("DataRoom(")
	builder.WriteString(fmt.Sprintf("id=%v", dr.ID))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", dr.Price))
	builder.WriteString(", roomnumber=")
	builder.WriteString(dr.Roomnumber)
	builder.WriteString(", roomdetail=")
	builder.WriteString(dr.Roomdetail)
	builder.WriteByte(')')
	return builder.String()
}

// DataRooms is a parsable slice of DataRoom.
type DataRooms []*DataRoom

func (dr DataRooms) config(cfg config) {
	for _i := range dr {
		dr[_i].config = cfg
	}
}
