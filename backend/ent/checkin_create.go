// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/checkin"
	"github.com/team18/app/ent/checkout"
	"github.com/team18/app/ent/counterstaff"
	"github.com/team18/app/ent/customer"
	"github.com/team18/app/ent/reserveroom"
)

// CheckInCreate is the builder for creating a CheckIn entity.
type CheckInCreate struct {
	config
	mutation *CheckInMutation
	hooks    []Hook
}

// SetCheckinDate sets the checkin_date field.
func (cic *CheckInCreate) SetCheckinDate(t time.Time) *CheckInCreate {
	cic.mutation.SetCheckinDate(t)
	return cic
}

// SetCustomerID sets the customer edge to Customer by id.
func (cic *CheckInCreate) SetCustomerID(id int) *CheckInCreate {
	cic.mutation.SetCustomerID(id)
	return cic
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (cic *CheckInCreate) SetNillableCustomerID(id *int) *CheckInCreate {
	if id != nil {
		cic = cic.SetCustomerID(*id)
	}
	return cic
}

// SetCustomer sets the customer edge to Customer.
func (cic *CheckInCreate) SetCustomer(c *Customer) *CheckInCreate {
	return cic.SetCustomerID(c.ID)
}

// SetCounterID sets the counter edge to CounterStaff by id.
func (cic *CheckInCreate) SetCounterID(id int) *CheckInCreate {
	cic.mutation.SetCounterID(id)
	return cic
}

// SetNillableCounterID sets the counter edge to CounterStaff by id if the given value is not nil.
func (cic *CheckInCreate) SetNillableCounterID(id *int) *CheckInCreate {
	if id != nil {
		cic = cic.SetCounterID(*id)
	}
	return cic
}

// SetCounter sets the counter edge to CounterStaff.
func (cic *CheckInCreate) SetCounter(c *CounterStaff) *CheckInCreate {
	return cic.SetCounterID(c.ID)
}

// SetReserveroomID sets the reserveroom edge to ReserveRoom by id.
func (cic *CheckInCreate) SetReserveroomID(id int) *CheckInCreate {
	cic.mutation.SetReserveroomID(id)
	return cic
}

// SetNillableReserveroomID sets the reserveroom edge to ReserveRoom by id if the given value is not nil.
func (cic *CheckInCreate) SetNillableReserveroomID(id *int) *CheckInCreate {
	if id != nil {
		cic = cic.SetReserveroomID(*id)
	}
	return cic
}

// SetReserveroom sets the reserveroom edge to ReserveRoom.
func (cic *CheckInCreate) SetReserveroom(r *ReserveRoom) *CheckInCreate {
	return cic.SetReserveroomID(r.ID)
}

// SetCheckoutsID sets the checkouts edge to Checkout by id.
func (cic *CheckInCreate) SetCheckoutsID(id int) *CheckInCreate {
	cic.mutation.SetCheckoutsID(id)
	return cic
}

// SetNillableCheckoutsID sets the checkouts edge to Checkout by id if the given value is not nil.
func (cic *CheckInCreate) SetNillableCheckoutsID(id *int) *CheckInCreate {
	if id != nil {
		cic = cic.SetCheckoutsID(*id)
	}
	return cic
}

// SetCheckouts sets the checkouts edge to Checkout.
func (cic *CheckInCreate) SetCheckouts(c *Checkout) *CheckInCreate {
	return cic.SetCheckoutsID(c.ID)
}

// Mutation returns the CheckInMutation object of the builder.
func (cic *CheckInCreate) Mutation() *CheckInMutation {
	return cic.mutation
}

// Save creates the CheckIn in the database.
func (cic *CheckInCreate) Save(ctx context.Context) (*CheckIn, error) {
	if _, ok := cic.mutation.CheckinDate(); !ok {
		return nil, &ValidationError{Name: "checkin_date", err: errors.New("ent: missing required field \"checkin_date\"")}
	}
	var (
		err  error
		node *CheckIn
	)
	if len(cic.hooks) == 0 {
		node, err = cic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckInMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cic.mutation = mutation
			node, err = cic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cic.hooks) - 1; i >= 0; i-- {
			mut = cic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CheckInCreate) SaveX(ctx context.Context) *CheckIn {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cic *CheckInCreate) sqlSave(ctx context.Context) (*CheckIn, error) {
	ci, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ci.ID = int(id)
	return ci, nil
}

func (cic *CheckInCreate) createSpec() (*CheckIn, *sqlgraph.CreateSpec) {
	var (
		ci    = &CheckIn{config: cic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: checkin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkin.FieldID,
			},
		}
	)
	if value, ok := cic.mutation.CheckinDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkin.FieldCheckinDate,
		})
		ci.CheckinDate = value
	}
	if nodes := cic.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.CustomerTable,
			Columns: []string{checkin.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.CounterTable,
			Columns: []string{checkin.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.ReserveroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.ReserveroomTable,
			Columns: []string{checkin.ReserveroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reserveroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   checkin.CheckoutsTable,
			Columns: []string{checkin.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ci, _spec
}
