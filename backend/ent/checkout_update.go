// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/checkin"
	"github.com/team18/app/ent/checkout"
	"github.com/team18/app/ent/counterstaff"
	"github.com/team18/app/ent/predicate"
	"github.com/team18/app/ent/status"
)

// CheckoutUpdate is the builder for updating Checkout entities.
type CheckoutUpdate struct {
	config
	hooks      []Hook
	mutation   *CheckoutMutation
	predicates []predicate.Checkout
}

// Where adds a new predicate for the builder.
func (cu *CheckoutUpdate) Where(ps ...predicate.Checkout) *CheckoutUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetCheckoutDate sets the checkout_date field.
func (cu *CheckoutUpdate) SetCheckoutDate(t time.Time) *CheckoutUpdate {
	cu.mutation.SetCheckoutDate(t)
	return cu
}

// SetStatussID sets the statuss edge to Status by id.
func (cu *CheckoutUpdate) SetStatussID(id int) *CheckoutUpdate {
	cu.mutation.SetStatussID(id)
	return cu
}

// SetNillableStatussID sets the statuss edge to Status by id if the given value is not nil.
func (cu *CheckoutUpdate) SetNillableStatussID(id *int) *CheckoutUpdate {
	if id != nil {
		cu = cu.SetStatussID(*id)
	}
	return cu
}

// SetStatuss sets the statuss edge to Status.
func (cu *CheckoutUpdate) SetStatuss(s *Status) *CheckoutUpdate {
	return cu.SetStatussID(s.ID)
}

// SetCounterstaffsID sets the counterstaffs edge to CounterStaff by id.
func (cu *CheckoutUpdate) SetCounterstaffsID(id int) *CheckoutUpdate {
	cu.mutation.SetCounterstaffsID(id)
	return cu
}

// SetNillableCounterstaffsID sets the counterstaffs edge to CounterStaff by id if the given value is not nil.
func (cu *CheckoutUpdate) SetNillableCounterstaffsID(id *int) *CheckoutUpdate {
	if id != nil {
		cu = cu.SetCounterstaffsID(*id)
	}
	return cu
}

// SetCounterstaffs sets the counterstaffs edge to CounterStaff.
func (cu *CheckoutUpdate) SetCounterstaffs(c *CounterStaff) *CheckoutUpdate {
	return cu.SetCounterstaffsID(c.ID)
}

// SetCheckinsID sets the checkins edge to CheckIn by id.
func (cu *CheckoutUpdate) SetCheckinsID(id int) *CheckoutUpdate {
	cu.mutation.SetCheckinsID(id)
	return cu
}

// SetCheckins sets the checkins edge to CheckIn.
func (cu *CheckoutUpdate) SetCheckins(c *CheckIn) *CheckoutUpdate {
	return cu.SetCheckinsID(c.ID)
}

// Mutation returns the CheckoutMutation object of the builder.
func (cu *CheckoutUpdate) Mutation() *CheckoutMutation {
	return cu.mutation
}

// ClearStatuss clears the statuss edge to Status.
func (cu *CheckoutUpdate) ClearStatuss() *CheckoutUpdate {
	cu.mutation.ClearStatuss()
	return cu
}

// ClearCounterstaffs clears the counterstaffs edge to CounterStaff.
func (cu *CheckoutUpdate) ClearCounterstaffs() *CheckoutUpdate {
	cu.mutation.ClearCounterstaffs()
	return cu
}

// ClearCheckins clears the checkins edge to CheckIn.
func (cu *CheckoutUpdate) ClearCheckins() *CheckoutUpdate {
	cu.mutation.ClearCheckins()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CheckoutUpdate) Save(ctx context.Context) (int, error) {

	if _, ok := cu.mutation.CheckinsID(); cu.mutation.CheckinsCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"checkins\"")
	}
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CheckoutUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CheckoutUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CheckoutUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CheckoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checkout.Table,
			Columns: checkout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkout.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CheckoutDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkout.FieldCheckoutDate,
		})
	}
	if cu.mutation.StatussCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.StatussTable,
			Columns: []string{checkout.StatussColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StatussIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.StatussTable,
			Columns: []string{checkout.StatussColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CounterstaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.CounterstaffsTable,
			Columns: []string{checkout.CounterstaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CounterstaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.CounterstaffsTable,
			Columns: []string{checkout.CounterstaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CheckinsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.CheckinsTable,
			Columns: []string{checkout.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.CheckinsTable,
			Columns: []string{checkout.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkout.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CheckoutUpdateOne is the builder for updating a single Checkout entity.
type CheckoutUpdateOne struct {
	config
	hooks    []Hook
	mutation *CheckoutMutation
}

// SetCheckoutDate sets the checkout_date field.
func (cuo *CheckoutUpdateOne) SetCheckoutDate(t time.Time) *CheckoutUpdateOne {
	cuo.mutation.SetCheckoutDate(t)
	return cuo
}

// SetStatussID sets the statuss edge to Status by id.
func (cuo *CheckoutUpdateOne) SetStatussID(id int) *CheckoutUpdateOne {
	cuo.mutation.SetStatussID(id)
	return cuo
}

// SetNillableStatussID sets the statuss edge to Status by id if the given value is not nil.
func (cuo *CheckoutUpdateOne) SetNillableStatussID(id *int) *CheckoutUpdateOne {
	if id != nil {
		cuo = cuo.SetStatussID(*id)
	}
	return cuo
}

// SetStatuss sets the statuss edge to Status.
func (cuo *CheckoutUpdateOne) SetStatuss(s *Status) *CheckoutUpdateOne {
	return cuo.SetStatussID(s.ID)
}

// SetCounterstaffsID sets the counterstaffs edge to CounterStaff by id.
func (cuo *CheckoutUpdateOne) SetCounterstaffsID(id int) *CheckoutUpdateOne {
	cuo.mutation.SetCounterstaffsID(id)
	return cuo
}

// SetNillableCounterstaffsID sets the counterstaffs edge to CounterStaff by id if the given value is not nil.
func (cuo *CheckoutUpdateOne) SetNillableCounterstaffsID(id *int) *CheckoutUpdateOne {
	if id != nil {
		cuo = cuo.SetCounterstaffsID(*id)
	}
	return cuo
}

// SetCounterstaffs sets the counterstaffs edge to CounterStaff.
func (cuo *CheckoutUpdateOne) SetCounterstaffs(c *CounterStaff) *CheckoutUpdateOne {
	return cuo.SetCounterstaffsID(c.ID)
}

// SetCheckinsID sets the checkins edge to CheckIn by id.
func (cuo *CheckoutUpdateOne) SetCheckinsID(id int) *CheckoutUpdateOne {
	cuo.mutation.SetCheckinsID(id)
	return cuo
}

// SetCheckins sets the checkins edge to CheckIn.
func (cuo *CheckoutUpdateOne) SetCheckins(c *CheckIn) *CheckoutUpdateOne {
	return cuo.SetCheckinsID(c.ID)
}

// Mutation returns the CheckoutMutation object of the builder.
func (cuo *CheckoutUpdateOne) Mutation() *CheckoutMutation {
	return cuo.mutation
}

// ClearStatuss clears the statuss edge to Status.
func (cuo *CheckoutUpdateOne) ClearStatuss() *CheckoutUpdateOne {
	cuo.mutation.ClearStatuss()
	return cuo
}

// ClearCounterstaffs clears the counterstaffs edge to CounterStaff.
func (cuo *CheckoutUpdateOne) ClearCounterstaffs() *CheckoutUpdateOne {
	cuo.mutation.ClearCounterstaffs()
	return cuo
}

// ClearCheckins clears the checkins edge to CheckIn.
func (cuo *CheckoutUpdateOne) ClearCheckins() *CheckoutUpdateOne {
	cuo.mutation.ClearCheckins()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *CheckoutUpdateOne) Save(ctx context.Context) (*Checkout, error) {

	if _, ok := cuo.mutation.CheckinsID(); cuo.mutation.CheckinsCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"checkins\"")
	}
	var (
		err  error
		node *Checkout
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CheckoutUpdateOne) SaveX(ctx context.Context) *Checkout {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CheckoutUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CheckoutUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CheckoutUpdateOne) sqlSave(ctx context.Context) (c *Checkout, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checkout.Table,
			Columns: checkout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkout.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Checkout.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.CheckoutDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkout.FieldCheckoutDate,
		})
	}
	if cuo.mutation.StatussCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.StatussTable,
			Columns: []string{checkout.StatussColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StatussIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.StatussTable,
			Columns: []string{checkout.StatussColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CounterstaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.CounterstaffsTable,
			Columns: []string{checkout.CounterstaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CounterstaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.CounterstaffsTable,
			Columns: []string{checkout.CounterstaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CheckinsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.CheckinsTable,
			Columns: []string{checkout.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.CheckinsTable,
			Columns: []string{checkout.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Checkout{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkout.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
