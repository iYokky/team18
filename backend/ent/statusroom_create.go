// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/statusroom"
)

// StatusRoomCreate is the builder for creating a StatusRoom entity.
type StatusRoomCreate struct {
	config
	mutation *StatusRoomMutation
	hooks    []Hook
}

// SetStatusName sets the status_name field.
func (src *StatusRoomCreate) SetStatusName(s string) *StatusRoomCreate {
	src.mutation.SetStatusName(s)
	return src
}

// AddDataroomIDs adds the datarooms edge to DataRoom by ids.
func (src *StatusRoomCreate) AddDataroomIDs(ids ...int) *StatusRoomCreate {
	src.mutation.AddDataroomIDs(ids...)
	return src
}

// AddDatarooms adds the datarooms edges to DataRoom.
func (src *StatusRoomCreate) AddDatarooms(d ...*DataRoom) *StatusRoomCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return src.AddDataroomIDs(ids...)
}

// Mutation returns the StatusRoomMutation object of the builder.
func (src *StatusRoomCreate) Mutation() *StatusRoomMutation {
	return src.mutation
}

// Save creates the StatusRoom in the database.
func (src *StatusRoomCreate) Save(ctx context.Context) (*StatusRoom, error) {
	if _, ok := src.mutation.StatusName(); !ok {
		return nil, &ValidationError{Name: "status_name", err: errors.New("ent: missing required field \"status_name\"")}
	}
	if v, ok := src.mutation.StatusName(); ok {
		if err := statusroom.StatusNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "status_name", err: fmt.Errorf("ent: validator failed for field \"status_name\": %w", err)}
		}
	}
	var (
		err  error
		node *StatusRoom
	)
	if len(src.hooks) == 0 {
		node, err = src.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			src.mutation = mutation
			node, err = src.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(src.hooks) - 1; i >= 0; i-- {
			mut = src.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, src.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (src *StatusRoomCreate) SaveX(ctx context.Context) *StatusRoom {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (src *StatusRoomCreate) sqlSave(ctx context.Context) (*StatusRoom, error) {
	sr, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	sr.ID = int(id)
	return sr, nil
}

func (src *StatusRoomCreate) createSpec() (*StatusRoom, *sqlgraph.CreateSpec) {
	var (
		sr    = &StatusRoom{config: src.config}
		_spec = &sqlgraph.CreateSpec{
			Table: statusroom.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusroom.FieldID,
			},
		}
	)
	if value, ok := src.mutation.StatusName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusroom.FieldStatusName,
		})
		sr.StatusName = value
	}
	if nodes := src.mutation.DataroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusroom.DataroomsTable,
			Columns: []string{statusroom.DataroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return sr, _spec
}
