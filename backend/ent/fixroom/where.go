// Code generated by entc, DO NOT EDIT.

package fixroom

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team18/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FixDetail applies equality check predicate on the "fix_detail" field. It's identical to FixDetailEQ.
func FixDetail(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFixDetail), v))
	})
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// Facebook applies equality check predicate on the "facebook" field. It's identical to FacebookEQ.
func Facebook(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// FixDetailEQ applies the EQ predicate on the "fix_detail" field.
func FixDetailEQ(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFixDetail), v))
	})
}

// FixDetailNEQ applies the NEQ predicate on the "fix_detail" field.
func FixDetailNEQ(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFixDetail), v))
	})
}

// FixDetailIn applies the In predicate on the "fix_detail" field.
func FixDetailIn(vs ...string) predicate.FixRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FixRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFixDetail), v...))
	})
}

// FixDetailNotIn applies the NotIn predicate on the "fix_detail" field.
func FixDetailNotIn(vs ...string) predicate.FixRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FixRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFixDetail), v...))
	})
}

// FixDetailGT applies the GT predicate on the "fix_detail" field.
func FixDetailGT(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFixDetail), v))
	})
}

// FixDetailGTE applies the GTE predicate on the "fix_detail" field.
func FixDetailGTE(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFixDetail), v))
	})
}

// FixDetailLT applies the LT predicate on the "fix_detail" field.
func FixDetailLT(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFixDetail), v))
	})
}

// FixDetailLTE applies the LTE predicate on the "fix_detail" field.
func FixDetailLTE(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFixDetail), v))
	})
}

// FixDetailContains applies the Contains predicate on the "fix_detail" field.
func FixDetailContains(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFixDetail), v))
	})
}

// FixDetailHasPrefix applies the HasPrefix predicate on the "fix_detail" field.
func FixDetailHasPrefix(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFixDetail), v))
	})
}

// FixDetailHasSuffix applies the HasSuffix predicate on the "fix_detail" field.
func FixDetailHasSuffix(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFixDetail), v))
	})
}

// FixDetailEqualFold applies the EqualFold predicate on the "fix_detail" field.
func FixDetailEqualFold(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFixDetail), v))
	})
}

// FixDetailContainsFold applies the ContainsFold predicate on the "fix_detail" field.
func FixDetailContainsFold(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFixDetail), v))
	})
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.FixRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FixRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.FixRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FixRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoneNumber), v))
	})
}

// FacebookEQ applies the EQ predicate on the "facebook" field.
func FacebookEQ(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// FacebookNEQ applies the NEQ predicate on the "facebook" field.
func FacebookNEQ(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacebook), v))
	})
}

// FacebookIn applies the In predicate on the "facebook" field.
func FacebookIn(vs ...string) predicate.FixRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FixRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFacebook), v...))
	})
}

// FacebookNotIn applies the NotIn predicate on the "facebook" field.
func FacebookNotIn(vs ...string) predicate.FixRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FixRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFacebook), v...))
	})
}

// FacebookGT applies the GT predicate on the "facebook" field.
func FacebookGT(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacebook), v))
	})
}

// FacebookGTE applies the GTE predicate on the "facebook" field.
func FacebookGTE(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacebook), v))
	})
}

// FacebookLT applies the LT predicate on the "facebook" field.
func FacebookLT(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacebook), v))
	})
}

// FacebookLTE applies the LTE predicate on the "facebook" field.
func FacebookLTE(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacebook), v))
	})
}

// FacebookContains applies the Contains predicate on the "facebook" field.
func FacebookContains(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFacebook), v))
	})
}

// FacebookHasPrefix applies the HasPrefix predicate on the "facebook" field.
func FacebookHasPrefix(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFacebook), v))
	})
}

// FacebookHasSuffix applies the HasSuffix predicate on the "facebook" field.
func FacebookHasSuffix(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFacebook), v))
	})
}

// FacebookEqualFold applies the EqualFold predicate on the "facebook" field.
func FacebookEqualFold(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFacebook), v))
	})
}

// FacebookContainsFold applies the ContainsFold predicate on the "facebook" field.
func FacebookContainsFold(v string) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFacebook), v))
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFurnitureDetail applies the HasEdge predicate on the "furnitureDetail" edge.
func HasFurnitureDetail() predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FurnitureDetailTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FurnitureDetailTable, FurnitureDetailColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFurnitureDetailWith applies the HasEdge predicate on the "furnitureDetail" edge with a given conditions (other predicates).
func HasFurnitureDetailWith(preds ...predicate.FurnitureDetail) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FurnitureDetailInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FurnitureDetailTable, FurnitureDetailColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.DataRoom) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.FixRoom) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.FixRoom) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FixRoom) predicate.FixRoom {
	return predicate.FixRoom(func(s *sql.Selector) {
		p(s.Not())
	})
}
