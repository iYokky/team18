// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/counterstaff"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/fixroom"
	"github.com/team18/app/ent/furniture"
	"github.com/team18/app/ent/furnituredetail"
	"github.com/team18/app/ent/furnituretype"
	"github.com/team18/app/ent/predicate"
)

// FurnitureDetailUpdate is the builder for updating FurnitureDetail entities.
type FurnitureDetailUpdate struct {
	config
	hooks      []Hook
	mutation   *FurnitureDetailMutation
	predicates []predicate.FurnitureDetail
}

// Where adds a new predicate for the builder.
func (fdu *FurnitureDetailUpdate) Where(ps ...predicate.FurnitureDetail) *FurnitureDetailUpdate {
	fdu.predicates = append(fdu.predicates, ps...)
	return fdu
}

// SetDateAdd sets the date_add field.
func (fdu *FurnitureDetailUpdate) SetDateAdd(t time.Time) *FurnitureDetailUpdate {
	fdu.mutation.SetDateAdd(t)
	return fdu
}

// SetFurnitureAmount sets the furniture_amount field.
func (fdu *FurnitureDetailUpdate) SetFurnitureAmount(i int) *FurnitureDetailUpdate {
	fdu.mutation.ResetFurnitureAmount()
	fdu.mutation.SetFurnitureAmount(i)
	return fdu
}

// AddFurnitureAmount adds i to furniture_amount.
func (fdu *FurnitureDetailUpdate) AddFurnitureAmount(i int) *FurnitureDetailUpdate {
	fdu.mutation.AddFurnitureAmount(i)
	return fdu
}

// SetFurnitureColour sets the furniture_colour field.
func (fdu *FurnitureDetailUpdate) SetFurnitureColour(s string) *FurnitureDetailUpdate {
	fdu.mutation.SetFurnitureColour(s)
	return fdu
}

// SetFurnitureDetail sets the furniture_detail field.
func (fdu *FurnitureDetailUpdate) SetFurnitureDetail(s string) *FurnitureDetailUpdate {
	fdu.mutation.SetFurnitureDetail(s)
	return fdu
}

// AddFixIDs adds the fixs edge to FixRoom by ids.
func (fdu *FurnitureDetailUpdate) AddFixIDs(ids ...int) *FurnitureDetailUpdate {
	fdu.mutation.AddFixIDs(ids...)
	return fdu
}

// AddFixs adds the fixs edges to FixRoom.
func (fdu *FurnitureDetailUpdate) AddFixs(f ...*FixRoom) *FurnitureDetailUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fdu.AddFixIDs(ids...)
}

// SetFurnituresID sets the furnitures edge to Furniture by id.
func (fdu *FurnitureDetailUpdate) SetFurnituresID(id int) *FurnitureDetailUpdate {
	fdu.mutation.SetFurnituresID(id)
	return fdu
}

// SetNillableFurnituresID sets the furnitures edge to Furniture by id if the given value is not nil.
func (fdu *FurnitureDetailUpdate) SetNillableFurnituresID(id *int) *FurnitureDetailUpdate {
	if id != nil {
		fdu = fdu.SetFurnituresID(*id)
	}
	return fdu
}

// SetFurnitures sets the furnitures edge to Furniture.
func (fdu *FurnitureDetailUpdate) SetFurnitures(f *Furniture) *FurnitureDetailUpdate {
	return fdu.SetFurnituresID(f.ID)
}

// SetCounterstaffsID sets the counterstaffs edge to CounterStaff by id.
func (fdu *FurnitureDetailUpdate) SetCounterstaffsID(id int) *FurnitureDetailUpdate {
	fdu.mutation.SetCounterstaffsID(id)
	return fdu
}

// SetNillableCounterstaffsID sets the counterstaffs edge to CounterStaff by id if the given value is not nil.
func (fdu *FurnitureDetailUpdate) SetNillableCounterstaffsID(id *int) *FurnitureDetailUpdate {
	if id != nil {
		fdu = fdu.SetCounterstaffsID(*id)
	}
	return fdu
}

// SetCounterstaffs sets the counterstaffs edge to CounterStaff.
func (fdu *FurnitureDetailUpdate) SetCounterstaffs(c *CounterStaff) *FurnitureDetailUpdate {
	return fdu.SetCounterstaffsID(c.ID)
}

// SetTypesID sets the types edge to FurnitureType by id.
func (fdu *FurnitureDetailUpdate) SetTypesID(id int) *FurnitureDetailUpdate {
	fdu.mutation.SetTypesID(id)
	return fdu
}

// SetNillableTypesID sets the types edge to FurnitureType by id if the given value is not nil.
func (fdu *FurnitureDetailUpdate) SetNillableTypesID(id *int) *FurnitureDetailUpdate {
	if id != nil {
		fdu = fdu.SetTypesID(*id)
	}
	return fdu
}

// SetTypes sets the types edge to FurnitureType.
func (fdu *FurnitureDetailUpdate) SetTypes(f *FurnitureType) *FurnitureDetailUpdate {
	return fdu.SetTypesID(f.ID)
}

// SetRoomsID sets the rooms edge to DataRoom by id.
func (fdu *FurnitureDetailUpdate) SetRoomsID(id int) *FurnitureDetailUpdate {
	fdu.mutation.SetRoomsID(id)
	return fdu
}

// SetNillableRoomsID sets the rooms edge to DataRoom by id if the given value is not nil.
func (fdu *FurnitureDetailUpdate) SetNillableRoomsID(id *int) *FurnitureDetailUpdate {
	if id != nil {
		fdu = fdu.SetRoomsID(*id)
	}
	return fdu
}

// SetRooms sets the rooms edge to DataRoom.
func (fdu *FurnitureDetailUpdate) SetRooms(d *DataRoom) *FurnitureDetailUpdate {
	return fdu.SetRoomsID(d.ID)
}

// Mutation returns the FurnitureDetailMutation object of the builder.
func (fdu *FurnitureDetailUpdate) Mutation() *FurnitureDetailMutation {
	return fdu.mutation
}

// RemoveFixIDs removes the fixs edge to FixRoom by ids.
func (fdu *FurnitureDetailUpdate) RemoveFixIDs(ids ...int) *FurnitureDetailUpdate {
	fdu.mutation.RemoveFixIDs(ids...)
	return fdu
}

// RemoveFixs removes fixs edges to FixRoom.
func (fdu *FurnitureDetailUpdate) RemoveFixs(f ...*FixRoom) *FurnitureDetailUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fdu.RemoveFixIDs(ids...)
}

// ClearFurnitures clears the furnitures edge to Furniture.
func (fdu *FurnitureDetailUpdate) ClearFurnitures() *FurnitureDetailUpdate {
	fdu.mutation.ClearFurnitures()
	return fdu
}

// ClearCounterstaffs clears the counterstaffs edge to CounterStaff.
func (fdu *FurnitureDetailUpdate) ClearCounterstaffs() *FurnitureDetailUpdate {
	fdu.mutation.ClearCounterstaffs()
	return fdu
}

// ClearTypes clears the types edge to FurnitureType.
func (fdu *FurnitureDetailUpdate) ClearTypes() *FurnitureDetailUpdate {
	fdu.mutation.ClearTypes()
	return fdu
}

// ClearRooms clears the rooms edge to DataRoom.
func (fdu *FurnitureDetailUpdate) ClearRooms() *FurnitureDetailUpdate {
	fdu.mutation.ClearRooms()
	return fdu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fdu *FurnitureDetailUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := fdu.mutation.FurnitureAmount(); ok {
		if err := furnituredetail.FurnitureAmountValidator(v); err != nil {
			return 0, &ValidationError{Name: "furniture_amount", err: fmt.Errorf("ent: validator failed for field \"furniture_amount\": %w", err)}
		}
	}
	if v, ok := fdu.mutation.FurnitureColour(); ok {
		if err := furnituredetail.FurnitureColourValidator(v); err != nil {
			return 0, &ValidationError{Name: "furniture_colour", err: fmt.Errorf("ent: validator failed for field \"furniture_colour\": %w", err)}
		}
	}
	if v, ok := fdu.mutation.FurnitureDetail(); ok {
		if err := furnituredetail.FurnitureDetailValidator(v); err != nil {
			return 0, &ValidationError{Name: "furniture_detail", err: fmt.Errorf("ent: validator failed for field \"furniture_detail\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(fdu.hooks) == 0 {
		affected, err = fdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FurnitureDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fdu.mutation = mutation
			affected, err = fdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fdu.hooks) - 1; i >= 0; i-- {
			mut = fdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fdu *FurnitureDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := fdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fdu *FurnitureDetailUpdate) Exec(ctx context.Context) error {
	_, err := fdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdu *FurnitureDetailUpdate) ExecX(ctx context.Context) {
	if err := fdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fdu *FurnitureDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   furnituredetail.Table,
			Columns: furnituredetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: furnituredetail.FieldID,
			},
		},
	}
	if ps := fdu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fdu.mutation.DateAdd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: furnituredetail.FieldDateAdd,
		})
	}
	if value, ok := fdu.mutation.FurnitureAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: furnituredetail.FieldFurnitureAmount,
		})
	}
	if value, ok := fdu.mutation.AddedFurnitureAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: furnituredetail.FieldFurnitureAmount,
		})
	}
	if value, ok := fdu.mutation.FurnitureColour(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: furnituredetail.FieldFurnitureColour,
		})
	}
	if value, ok := fdu.mutation.FurnitureDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: furnituredetail.FieldFurnitureDetail,
		})
	}
	if nodes := fdu.mutation.RemovedFixsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   furnituredetail.FixsTable,
			Columns: []string{furnituredetail.FixsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fdu.mutation.FixsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   furnituredetail.FixsTable,
			Columns: []string{furnituredetail.FixsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fdu.mutation.FurnituresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.FurnituresTable,
			Columns: []string{furnituredetail.FurnituresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furniture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fdu.mutation.FurnituresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.FurnituresTable,
			Columns: []string{furnituredetail.FurnituresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furniture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fdu.mutation.CounterstaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.CounterstaffsTable,
			Columns: []string{furnituredetail.CounterstaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fdu.mutation.CounterstaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.CounterstaffsTable,
			Columns: []string{furnituredetail.CounterstaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fdu.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.TypesTable,
			Columns: []string{furnituredetail.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituretype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fdu.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.TypesTable,
			Columns: []string{furnituredetail.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituretype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fdu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.RoomsTable,
			Columns: []string{furnituredetail.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fdu.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.RoomsTable,
			Columns: []string{furnituredetail.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{furnituredetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FurnitureDetailUpdateOne is the builder for updating a single FurnitureDetail entity.
type FurnitureDetailUpdateOne struct {
	config
	hooks    []Hook
	mutation *FurnitureDetailMutation
}

// SetDateAdd sets the date_add field.
func (fduo *FurnitureDetailUpdateOne) SetDateAdd(t time.Time) *FurnitureDetailUpdateOne {
	fduo.mutation.SetDateAdd(t)
	return fduo
}

// SetFurnitureAmount sets the furniture_amount field.
func (fduo *FurnitureDetailUpdateOne) SetFurnitureAmount(i int) *FurnitureDetailUpdateOne {
	fduo.mutation.ResetFurnitureAmount()
	fduo.mutation.SetFurnitureAmount(i)
	return fduo
}

// AddFurnitureAmount adds i to furniture_amount.
func (fduo *FurnitureDetailUpdateOne) AddFurnitureAmount(i int) *FurnitureDetailUpdateOne {
	fduo.mutation.AddFurnitureAmount(i)
	return fduo
}

// SetFurnitureColour sets the furniture_colour field.
func (fduo *FurnitureDetailUpdateOne) SetFurnitureColour(s string) *FurnitureDetailUpdateOne {
	fduo.mutation.SetFurnitureColour(s)
	return fduo
}

// SetFurnitureDetail sets the furniture_detail field.
func (fduo *FurnitureDetailUpdateOne) SetFurnitureDetail(s string) *FurnitureDetailUpdateOne {
	fduo.mutation.SetFurnitureDetail(s)
	return fduo
}

// AddFixIDs adds the fixs edge to FixRoom by ids.
func (fduo *FurnitureDetailUpdateOne) AddFixIDs(ids ...int) *FurnitureDetailUpdateOne {
	fduo.mutation.AddFixIDs(ids...)
	return fduo
}

// AddFixs adds the fixs edges to FixRoom.
func (fduo *FurnitureDetailUpdateOne) AddFixs(f ...*FixRoom) *FurnitureDetailUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fduo.AddFixIDs(ids...)
}

// SetFurnituresID sets the furnitures edge to Furniture by id.
func (fduo *FurnitureDetailUpdateOne) SetFurnituresID(id int) *FurnitureDetailUpdateOne {
	fduo.mutation.SetFurnituresID(id)
	return fduo
}

// SetNillableFurnituresID sets the furnitures edge to Furniture by id if the given value is not nil.
func (fduo *FurnitureDetailUpdateOne) SetNillableFurnituresID(id *int) *FurnitureDetailUpdateOne {
	if id != nil {
		fduo = fduo.SetFurnituresID(*id)
	}
	return fduo
}

// SetFurnitures sets the furnitures edge to Furniture.
func (fduo *FurnitureDetailUpdateOne) SetFurnitures(f *Furniture) *FurnitureDetailUpdateOne {
	return fduo.SetFurnituresID(f.ID)
}

// SetCounterstaffsID sets the counterstaffs edge to CounterStaff by id.
func (fduo *FurnitureDetailUpdateOne) SetCounterstaffsID(id int) *FurnitureDetailUpdateOne {
	fduo.mutation.SetCounterstaffsID(id)
	return fduo
}

// SetNillableCounterstaffsID sets the counterstaffs edge to CounterStaff by id if the given value is not nil.
func (fduo *FurnitureDetailUpdateOne) SetNillableCounterstaffsID(id *int) *FurnitureDetailUpdateOne {
	if id != nil {
		fduo = fduo.SetCounterstaffsID(*id)
	}
	return fduo
}

// SetCounterstaffs sets the counterstaffs edge to CounterStaff.
func (fduo *FurnitureDetailUpdateOne) SetCounterstaffs(c *CounterStaff) *FurnitureDetailUpdateOne {
	return fduo.SetCounterstaffsID(c.ID)
}

// SetTypesID sets the types edge to FurnitureType by id.
func (fduo *FurnitureDetailUpdateOne) SetTypesID(id int) *FurnitureDetailUpdateOne {
	fduo.mutation.SetTypesID(id)
	return fduo
}

// SetNillableTypesID sets the types edge to FurnitureType by id if the given value is not nil.
func (fduo *FurnitureDetailUpdateOne) SetNillableTypesID(id *int) *FurnitureDetailUpdateOne {
	if id != nil {
		fduo = fduo.SetTypesID(*id)
	}
	return fduo
}

// SetTypes sets the types edge to FurnitureType.
func (fduo *FurnitureDetailUpdateOne) SetTypes(f *FurnitureType) *FurnitureDetailUpdateOne {
	return fduo.SetTypesID(f.ID)
}

// SetRoomsID sets the rooms edge to DataRoom by id.
func (fduo *FurnitureDetailUpdateOne) SetRoomsID(id int) *FurnitureDetailUpdateOne {
	fduo.mutation.SetRoomsID(id)
	return fduo
}

// SetNillableRoomsID sets the rooms edge to DataRoom by id if the given value is not nil.
func (fduo *FurnitureDetailUpdateOne) SetNillableRoomsID(id *int) *FurnitureDetailUpdateOne {
	if id != nil {
		fduo = fduo.SetRoomsID(*id)
	}
	return fduo
}

// SetRooms sets the rooms edge to DataRoom.
func (fduo *FurnitureDetailUpdateOne) SetRooms(d *DataRoom) *FurnitureDetailUpdateOne {
	return fduo.SetRoomsID(d.ID)
}

// Mutation returns the FurnitureDetailMutation object of the builder.
func (fduo *FurnitureDetailUpdateOne) Mutation() *FurnitureDetailMutation {
	return fduo.mutation
}

// RemoveFixIDs removes the fixs edge to FixRoom by ids.
func (fduo *FurnitureDetailUpdateOne) RemoveFixIDs(ids ...int) *FurnitureDetailUpdateOne {
	fduo.mutation.RemoveFixIDs(ids...)
	return fduo
}

// RemoveFixs removes fixs edges to FixRoom.
func (fduo *FurnitureDetailUpdateOne) RemoveFixs(f ...*FixRoom) *FurnitureDetailUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fduo.RemoveFixIDs(ids...)
}

// ClearFurnitures clears the furnitures edge to Furniture.
func (fduo *FurnitureDetailUpdateOne) ClearFurnitures() *FurnitureDetailUpdateOne {
	fduo.mutation.ClearFurnitures()
	return fduo
}

// ClearCounterstaffs clears the counterstaffs edge to CounterStaff.
func (fduo *FurnitureDetailUpdateOne) ClearCounterstaffs() *FurnitureDetailUpdateOne {
	fduo.mutation.ClearCounterstaffs()
	return fduo
}

// ClearTypes clears the types edge to FurnitureType.
func (fduo *FurnitureDetailUpdateOne) ClearTypes() *FurnitureDetailUpdateOne {
	fduo.mutation.ClearTypes()
	return fduo
}

// ClearRooms clears the rooms edge to DataRoom.
func (fduo *FurnitureDetailUpdateOne) ClearRooms() *FurnitureDetailUpdateOne {
	fduo.mutation.ClearRooms()
	return fduo
}

// Save executes the query and returns the updated entity.
func (fduo *FurnitureDetailUpdateOne) Save(ctx context.Context) (*FurnitureDetail, error) {
	if v, ok := fduo.mutation.FurnitureAmount(); ok {
		if err := furnituredetail.FurnitureAmountValidator(v); err != nil {
			return nil, &ValidationError{Name: "furniture_amount", err: fmt.Errorf("ent: validator failed for field \"furniture_amount\": %w", err)}
		}
	}
	if v, ok := fduo.mutation.FurnitureColour(); ok {
		if err := furnituredetail.FurnitureColourValidator(v); err != nil {
			return nil, &ValidationError{Name: "furniture_colour", err: fmt.Errorf("ent: validator failed for field \"furniture_colour\": %w", err)}
		}
	}
	if v, ok := fduo.mutation.FurnitureDetail(); ok {
		if err := furnituredetail.FurnitureDetailValidator(v); err != nil {
			return nil, &ValidationError{Name: "furniture_detail", err: fmt.Errorf("ent: validator failed for field \"furniture_detail\": %w", err)}
		}
	}

	var (
		err  error
		node *FurnitureDetail
	)
	if len(fduo.hooks) == 0 {
		node, err = fduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FurnitureDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fduo.mutation = mutation
			node, err = fduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fduo.hooks) - 1; i >= 0; i-- {
			mut = fduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fduo *FurnitureDetailUpdateOne) SaveX(ctx context.Context) *FurnitureDetail {
	fd, err := fduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return fd
}

// Exec executes the query on the entity.
func (fduo *FurnitureDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := fduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fduo *FurnitureDetailUpdateOne) ExecX(ctx context.Context) {
	if err := fduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fduo *FurnitureDetailUpdateOne) sqlSave(ctx context.Context) (fd *FurnitureDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   furnituredetail.Table,
			Columns: furnituredetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: furnituredetail.FieldID,
			},
		},
	}
	id, ok := fduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FurnitureDetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fduo.mutation.DateAdd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: furnituredetail.FieldDateAdd,
		})
	}
	if value, ok := fduo.mutation.FurnitureAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: furnituredetail.FieldFurnitureAmount,
		})
	}
	if value, ok := fduo.mutation.AddedFurnitureAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: furnituredetail.FieldFurnitureAmount,
		})
	}
	if value, ok := fduo.mutation.FurnitureColour(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: furnituredetail.FieldFurnitureColour,
		})
	}
	if value, ok := fduo.mutation.FurnitureDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: furnituredetail.FieldFurnitureDetail,
		})
	}
	if nodes := fduo.mutation.RemovedFixsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   furnituredetail.FixsTable,
			Columns: []string{furnituredetail.FixsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fduo.mutation.FixsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   furnituredetail.FixsTable,
			Columns: []string{furnituredetail.FixsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fduo.mutation.FurnituresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.FurnituresTable,
			Columns: []string{furnituredetail.FurnituresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furniture.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fduo.mutation.FurnituresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.FurnituresTable,
			Columns: []string{furnituredetail.FurnituresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furniture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fduo.mutation.CounterstaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.CounterstaffsTable,
			Columns: []string{furnituredetail.CounterstaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fduo.mutation.CounterstaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.CounterstaffsTable,
			Columns: []string{furnituredetail.CounterstaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fduo.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.TypesTable,
			Columns: []string{furnituredetail.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituretype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fduo.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.TypesTable,
			Columns: []string{furnituredetail.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituretype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fduo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.RoomsTable,
			Columns: []string{furnituredetail.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fduo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.RoomsTable,
			Columns: []string{furnituredetail.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	fd = &FurnitureDetail{config: fduo.config}
	_spec.Assign = fd.assignValues
	_spec.ScanValues = fd.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{furnituredetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return fd, nil
}
