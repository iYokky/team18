// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/counterstaff"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/fixroom"
	"github.com/team18/app/ent/furniture"
	"github.com/team18/app/ent/furnituredetail"
	"github.com/team18/app/ent/furnituretype"
)

// FurnitureDetailCreate is the builder for creating a FurnitureDetail entity.
type FurnitureDetailCreate struct {
	config
	mutation *FurnitureDetailMutation
	hooks    []Hook
}

// SetDateAdd sets the date_add field.
func (fdc *FurnitureDetailCreate) SetDateAdd(t time.Time) *FurnitureDetailCreate {
	fdc.mutation.SetDateAdd(t)
	return fdc
}

// AddFixIDs adds the fixs edge to FixRoom by ids.
func (fdc *FurnitureDetailCreate) AddFixIDs(ids ...int) *FurnitureDetailCreate {
	fdc.mutation.AddFixIDs(ids...)
	return fdc
}

// AddFixs adds the fixs edges to FixRoom.
func (fdc *FurnitureDetailCreate) AddFixs(f ...*FixRoom) *FurnitureDetailCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fdc.AddFixIDs(ids...)
}

// SetFurnituresID sets the furnitures edge to Furniture by id.
func (fdc *FurnitureDetailCreate) SetFurnituresID(id int) *FurnitureDetailCreate {
	fdc.mutation.SetFurnituresID(id)
	return fdc
}

// SetNillableFurnituresID sets the furnitures edge to Furniture by id if the given value is not nil.
func (fdc *FurnitureDetailCreate) SetNillableFurnituresID(id *int) *FurnitureDetailCreate {
	if id != nil {
		fdc = fdc.SetFurnituresID(*id)
	}
	return fdc
}

// SetFurnitures sets the furnitures edge to Furniture.
func (fdc *FurnitureDetailCreate) SetFurnitures(f *Furniture) *FurnitureDetailCreate {
	return fdc.SetFurnituresID(f.ID)
}

// SetCounterstaffsID sets the counterstaffs edge to CounterStaff by id.
func (fdc *FurnitureDetailCreate) SetCounterstaffsID(id int) *FurnitureDetailCreate {
	fdc.mutation.SetCounterstaffsID(id)
	return fdc
}

// SetNillableCounterstaffsID sets the counterstaffs edge to CounterStaff by id if the given value is not nil.
func (fdc *FurnitureDetailCreate) SetNillableCounterstaffsID(id *int) *FurnitureDetailCreate {
	if id != nil {
		fdc = fdc.SetCounterstaffsID(*id)
	}
	return fdc
}

// SetCounterstaffs sets the counterstaffs edge to CounterStaff.
func (fdc *FurnitureDetailCreate) SetCounterstaffs(c *CounterStaff) *FurnitureDetailCreate {
	return fdc.SetCounterstaffsID(c.ID)
}

// SetTypesID sets the types edge to FurnitureType by id.
func (fdc *FurnitureDetailCreate) SetTypesID(id int) *FurnitureDetailCreate {
	fdc.mutation.SetTypesID(id)
	return fdc
}

// SetNillableTypesID sets the types edge to FurnitureType by id if the given value is not nil.
func (fdc *FurnitureDetailCreate) SetNillableTypesID(id *int) *FurnitureDetailCreate {
	if id != nil {
		fdc = fdc.SetTypesID(*id)
	}
	return fdc
}

// SetTypes sets the types edge to FurnitureType.
func (fdc *FurnitureDetailCreate) SetTypes(f *FurnitureType) *FurnitureDetailCreate {
	return fdc.SetTypesID(f.ID)
}

// SetRoomsID sets the rooms edge to DataRoom by id.
func (fdc *FurnitureDetailCreate) SetRoomsID(id int) *FurnitureDetailCreate {
	fdc.mutation.SetRoomsID(id)
	return fdc
}

// SetNillableRoomsID sets the rooms edge to DataRoom by id if the given value is not nil.
func (fdc *FurnitureDetailCreate) SetNillableRoomsID(id *int) *FurnitureDetailCreate {
	if id != nil {
		fdc = fdc.SetRoomsID(*id)
	}
	return fdc
}

// SetRooms sets the rooms edge to DataRoom.
func (fdc *FurnitureDetailCreate) SetRooms(d *DataRoom) *FurnitureDetailCreate {
	return fdc.SetRoomsID(d.ID)
}

// Mutation returns the FurnitureDetailMutation object of the builder.
func (fdc *FurnitureDetailCreate) Mutation() *FurnitureDetailMutation {
	return fdc.mutation
}

// Save creates the FurnitureDetail in the database.
func (fdc *FurnitureDetailCreate) Save(ctx context.Context) (*FurnitureDetail, error) {
	if _, ok := fdc.mutation.DateAdd(); !ok {
		return nil, &ValidationError{Name: "date_add", err: errors.New("ent: missing required field \"date_add\"")}
	}
	var (
		err  error
		node *FurnitureDetail
	)
	if len(fdc.hooks) == 0 {
		node, err = fdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FurnitureDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fdc.mutation = mutation
			node, err = fdc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fdc.hooks) - 1; i >= 0; i-- {
			mut = fdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fdc *FurnitureDetailCreate) SaveX(ctx context.Context) *FurnitureDetail {
	v, err := fdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fdc *FurnitureDetailCreate) sqlSave(ctx context.Context) (*FurnitureDetail, error) {
	fd, _spec := fdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fdc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	fd.ID = int(id)
	return fd, nil
}

func (fdc *FurnitureDetailCreate) createSpec() (*FurnitureDetail, *sqlgraph.CreateSpec) {
	var (
		fd    = &FurnitureDetail{config: fdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: furnituredetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: furnituredetail.FieldID,
			},
		}
	)
	if value, ok := fdc.mutation.DateAdd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: furnituredetail.FieldDateAdd,
		})
		fd.DateAdd = value
	}
	if nodes := fdc.mutation.FixsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   furnituredetail.FixsTable,
			Columns: []string{furnituredetail.FixsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fdc.mutation.FurnituresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.FurnituresTable,
			Columns: []string{furnituredetail.FurnituresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furniture.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fdc.mutation.CounterstaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.CounterstaffsTable,
			Columns: []string{furnituredetail.CounterstaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fdc.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.TypesTable,
			Columns: []string{furnituredetail.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituretype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fdc.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   furnituredetail.RoomsTable,
			Columns: []string{furnituredetail.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return fd, _spec
}
