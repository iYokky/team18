// Code generated by entc, DO NOT EDIT.

package checkin

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team18/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CheckinDate applies equality check predicate on the "checkin_date" field. It's identical to CheckinDateEQ.
func CheckinDate(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateEQ applies the EQ predicate on the "checkin_date" field.
func CheckinDateEQ(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateNEQ applies the NEQ predicate on the "checkin_date" field.
func CheckinDateNEQ(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateIn applies the In predicate on the "checkin_date" field.
func CheckinDateIn(vs ...time.Time) predicate.CheckIn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheckinDate), v...))
	})
}

// CheckinDateNotIn applies the NotIn predicate on the "checkin_date" field.
func CheckinDateNotIn(vs ...time.Time) predicate.CheckIn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheckinDate), v...))
	})
}

// CheckinDateGT applies the GT predicate on the "checkin_date" field.
func CheckinDateGT(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateGTE applies the GTE predicate on the "checkin_date" field.
func CheckinDateGTE(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateLT applies the LT predicate on the "checkin_date" field.
func CheckinDateLT(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateLTE applies the LTE predicate on the "checkin_date" field.
func CheckinDateLTE(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckinDate), v))
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCounter applies the HasEdge predicate on the "counter" edge.
func HasCounter() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CounterTable, CounterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCounterWith applies the HasEdge predicate on the "counter" edge with a given conditions (other predicates).
func HasCounterWith(preds ...predicate.CounterStaff) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CounterTable, CounterColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReserveroom applies the HasEdge predicate on the "reserveroom" edge.
func HasReserveroom() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReserveroomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReserveroomTable, ReserveroomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReserveroomWith applies the HasEdge predicate on the "reserveroom" edge with a given conditions (other predicates).
func HasReserveroomWith(preds ...predicate.ReserveRoom) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReserveroomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReserveroomTable, ReserveroomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDataroom applies the HasEdge predicate on the "dataroom" edge.
func HasDataroom() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DataroomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DataroomTable, DataroomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDataroomWith applies the HasEdge predicate on the "dataroom" edge with a given conditions (other predicates).
func HasDataroomWith(preds ...predicate.DataRoom) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DataroomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DataroomTable, DataroomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatus applies the HasEdge predicate on the "status" edge.
func HasStatus() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.StatusCheckIn) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCheckouts applies the HasEdge predicate on the "checkouts" edge.
func HasCheckouts() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CheckoutsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CheckoutsTable, CheckoutsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCheckoutsWith applies the HasEdge predicate on the "checkouts" edge with a given conditions (other predicates).
func HasCheckoutsWith(preds ...predicate.Checkout) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CheckoutsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CheckoutsTable, CheckoutsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.CheckIn) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.CheckIn) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CheckIn) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		p(s.Not())
	})
}
