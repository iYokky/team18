// Code generated by entc, DO NOT EDIT.

package checkin

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team18/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CheckinDate applies equality check predicate on the "checkin_date" field. It's identical to CheckinDateEQ.
func CheckinDate(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckinDate), v))
	})
}

// MobileKey applies equality check predicate on the "mobile_key" field. It's identical to MobileKeyEQ.
func MobileKey(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobileKey), v))
	})
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// PersonNumber applies equality check predicate on the "person_number" field. It's identical to PersonNumberEQ.
func PersonNumber(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPersonNumber), v))
	})
}

// CheckinDateEQ applies the EQ predicate on the "checkin_date" field.
func CheckinDateEQ(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateNEQ applies the NEQ predicate on the "checkin_date" field.
func CheckinDateNEQ(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateIn applies the In predicate on the "checkin_date" field.
func CheckinDateIn(vs ...time.Time) predicate.CheckIn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheckinDate), v...))
	})
}

// CheckinDateNotIn applies the NotIn predicate on the "checkin_date" field.
func CheckinDateNotIn(vs ...time.Time) predicate.CheckIn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheckinDate), v...))
	})
}

// CheckinDateGT applies the GT predicate on the "checkin_date" field.
func CheckinDateGT(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateGTE applies the GTE predicate on the "checkin_date" field.
func CheckinDateGTE(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateLT applies the LT predicate on the "checkin_date" field.
func CheckinDateLT(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckinDate), v))
	})
}

// CheckinDateLTE applies the LTE predicate on the "checkin_date" field.
func CheckinDateLTE(v time.Time) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckinDate), v))
	})
}

// MobileKeyEQ applies the EQ predicate on the "mobile_key" field.
func MobileKeyEQ(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobileKey), v))
	})
}

// MobileKeyNEQ applies the NEQ predicate on the "mobile_key" field.
func MobileKeyNEQ(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMobileKey), v))
	})
}

// MobileKeyIn applies the In predicate on the "mobile_key" field.
func MobileKeyIn(vs ...string) predicate.CheckIn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMobileKey), v...))
	})
}

// MobileKeyNotIn applies the NotIn predicate on the "mobile_key" field.
func MobileKeyNotIn(vs ...string) predicate.CheckIn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMobileKey), v...))
	})
}

// MobileKeyGT applies the GT predicate on the "mobile_key" field.
func MobileKeyGT(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMobileKey), v))
	})
}

// MobileKeyGTE applies the GTE predicate on the "mobile_key" field.
func MobileKeyGTE(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMobileKey), v))
	})
}

// MobileKeyLT applies the LT predicate on the "mobile_key" field.
func MobileKeyLT(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMobileKey), v))
	})
}

// MobileKeyLTE applies the LTE predicate on the "mobile_key" field.
func MobileKeyLTE(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMobileKey), v))
	})
}

// MobileKeyContains applies the Contains predicate on the "mobile_key" field.
func MobileKeyContains(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMobileKey), v))
	})
}

// MobileKeyHasPrefix applies the HasPrefix predicate on the "mobile_key" field.
func MobileKeyHasPrefix(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMobileKey), v))
	})
}

// MobileKeyHasSuffix applies the HasSuffix predicate on the "mobile_key" field.
func MobileKeyHasSuffix(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMobileKey), v))
	})
}

// MobileKeyEqualFold applies the EqualFold predicate on the "mobile_key" field.
func MobileKeyEqualFold(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMobileKey), v))
	})
}

// MobileKeyContainsFold applies the ContainsFold predicate on the "mobile_key" field.
func MobileKeyContainsFold(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMobileKey), v))
	})
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.CheckIn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.CheckIn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoneNumber), v))
	})
}

// PersonNumberEQ applies the EQ predicate on the "person_number" field.
func PersonNumberEQ(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPersonNumber), v))
	})
}

// PersonNumberNEQ applies the NEQ predicate on the "person_number" field.
func PersonNumberNEQ(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPersonNumber), v))
	})
}

// PersonNumberIn applies the In predicate on the "person_number" field.
func PersonNumberIn(vs ...string) predicate.CheckIn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPersonNumber), v...))
	})
}

// PersonNumberNotIn applies the NotIn predicate on the "person_number" field.
func PersonNumberNotIn(vs ...string) predicate.CheckIn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CheckIn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPersonNumber), v...))
	})
}

// PersonNumberGT applies the GT predicate on the "person_number" field.
func PersonNumberGT(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPersonNumber), v))
	})
}

// PersonNumberGTE applies the GTE predicate on the "person_number" field.
func PersonNumberGTE(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPersonNumber), v))
	})
}

// PersonNumberLT applies the LT predicate on the "person_number" field.
func PersonNumberLT(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPersonNumber), v))
	})
}

// PersonNumberLTE applies the LTE predicate on the "person_number" field.
func PersonNumberLTE(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPersonNumber), v))
	})
}

// PersonNumberContains applies the Contains predicate on the "person_number" field.
func PersonNumberContains(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPersonNumber), v))
	})
}

// PersonNumberHasPrefix applies the HasPrefix predicate on the "person_number" field.
func PersonNumberHasPrefix(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPersonNumber), v))
	})
}

// PersonNumberHasSuffix applies the HasSuffix predicate on the "person_number" field.
func PersonNumberHasSuffix(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPersonNumber), v))
	})
}

// PersonNumberEqualFold applies the EqualFold predicate on the "person_number" field.
func PersonNumberEqualFold(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPersonNumber), v))
	})
}

// PersonNumberContainsFold applies the ContainsFold predicate on the "person_number" field.
func PersonNumberContainsFold(v string) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPersonNumber), v))
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCounter applies the HasEdge predicate on the "counter" edge.
func HasCounter() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CounterTable, CounterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCounterWith applies the HasEdge predicate on the "counter" edge with a given conditions (other predicates).
func HasCounterWith(preds ...predicate.CounterStaff) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CounterTable, CounterColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReserveroom applies the HasEdge predicate on the "reserveroom" edge.
func HasReserveroom() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReserveroomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReserveroomTable, ReserveroomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReserveroomWith applies the HasEdge predicate on the "reserveroom" edge with a given conditions (other predicates).
func HasReserveroomWith(preds ...predicate.ReserveRoom) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReserveroomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReserveroomTable, ReserveroomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDataroom applies the HasEdge predicate on the "dataroom" edge.
func HasDataroom() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DataroomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DataroomTable, DataroomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDataroomWith applies the HasEdge predicate on the "dataroom" edge with a given conditions (other predicates).
func HasDataroomWith(preds ...predicate.DataRoom) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DataroomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DataroomTable, DataroomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatus applies the HasEdge predicate on the "status" edge.
func HasStatus() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.StatusCheckIn) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCheckouts applies the HasEdge predicate on the "checkouts" edge.
func HasCheckouts() predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CheckoutsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CheckoutsTable, CheckoutsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCheckoutsWith applies the HasEdge predicate on the "checkouts" edge with a given conditions (other predicates).
func HasCheckoutsWith(preds ...predicate.Checkout) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CheckoutsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CheckoutsTable, CheckoutsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.CheckIn) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.CheckIn) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CheckIn) predicate.CheckIn {
	return predicate.CheckIn(func(s *sql.Selector) {
		p(s.Not())
	})
}
