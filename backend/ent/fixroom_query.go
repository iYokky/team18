// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/customer"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/fixroom"
	"github.com/team18/app/ent/furnituredetail"
	"github.com/team18/app/ent/predicate"
)

// FixRoomQuery is the builder for querying FixRoom entities.
type FixRoomQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.FixRoom
	// eager-loading edges.
	withCustomer        *CustomerQuery
	withFurnitureDetail *FurnitureDetailQuery
	withRoom            *DataRoomQuery
	withFKs             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (frq *FixRoomQuery) Where(ps ...predicate.FixRoom) *FixRoomQuery {
	frq.predicates = append(frq.predicates, ps...)
	return frq
}

// Limit adds a limit step to the query.
func (frq *FixRoomQuery) Limit(limit int) *FixRoomQuery {
	frq.limit = &limit
	return frq
}

// Offset adds an offset step to the query.
func (frq *FixRoomQuery) Offset(offset int) *FixRoomQuery {
	frq.offset = &offset
	return frq
}

// Order adds an order step to the query.
func (frq *FixRoomQuery) Order(o ...OrderFunc) *FixRoomQuery {
	frq.order = append(frq.order, o...)
	return frq
}

// QueryCustomer chains the current query on the customer edge.
func (frq *FixRoomQuery) QueryCustomer() *CustomerQuery {
	query := &CustomerQuery{config: frq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := frq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixroom.Table, fixroom.FieldID, frq.sqlQuery()),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixroom.CustomerTable, fixroom.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(frq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFurnitureDetail chains the current query on the furnitureDetail edge.
func (frq *FixRoomQuery) QueryFurnitureDetail() *FurnitureDetailQuery {
	query := &FurnitureDetailQuery{config: frq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := frq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixroom.Table, fixroom.FieldID, frq.sqlQuery()),
			sqlgraph.To(furnituredetail.Table, furnituredetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixroom.FurnitureDetailTable, fixroom.FurnitureDetailColumn),
		)
		fromU = sqlgraph.SetNeighbors(frq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoom chains the current query on the room edge.
func (frq *FixRoomQuery) QueryRoom() *DataRoomQuery {
	query := &DataRoomQuery{config: frq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := frq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fixroom.Table, fixroom.FieldID, frq.sqlQuery()),
			sqlgraph.To(dataroom.Table, dataroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixroom.RoomTable, fixroom.RoomColumn),
		)
		fromU = sqlgraph.SetNeighbors(frq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FixRoom entity in the query. Returns *NotFoundError when no fixroom was found.
func (frq *FixRoomQuery) First(ctx context.Context) (*FixRoom, error) {
	frs, err := frq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(frs) == 0 {
		return nil, &NotFoundError{fixroom.Label}
	}
	return frs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (frq *FixRoomQuery) FirstX(ctx context.Context) *FixRoom {
	fr, err := frq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return fr
}

// FirstID returns the first FixRoom id in the query. Returns *NotFoundError when no id was found.
func (frq *FixRoomQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = frq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{fixroom.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (frq *FixRoomQuery) FirstXID(ctx context.Context) int {
	id, err := frq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only FixRoom entity in the query, returns an error if not exactly one entity was returned.
func (frq *FixRoomQuery) Only(ctx context.Context) (*FixRoom, error) {
	frs, err := frq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(frs) {
	case 1:
		return frs[0], nil
	case 0:
		return nil, &NotFoundError{fixroom.Label}
	default:
		return nil, &NotSingularError{fixroom.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (frq *FixRoomQuery) OnlyX(ctx context.Context) *FixRoom {
	fr, err := frq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return fr
}

// OnlyID returns the only FixRoom id in the query, returns an error if not exactly one id was returned.
func (frq *FixRoomQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = frq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{fixroom.Label}
	default:
		err = &NotSingularError{fixroom.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (frq *FixRoomQuery) OnlyIDX(ctx context.Context) int {
	id, err := frq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FixRooms.
func (frq *FixRoomQuery) All(ctx context.Context) ([]*FixRoom, error) {
	if err := frq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return frq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (frq *FixRoomQuery) AllX(ctx context.Context) []*FixRoom {
	frs, err := frq.All(ctx)
	if err != nil {
		panic(err)
	}
	return frs
}

// IDs executes the query and returns a list of FixRoom ids.
func (frq *FixRoomQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := frq.Select(fixroom.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (frq *FixRoomQuery) IDsX(ctx context.Context) []int {
	ids, err := frq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (frq *FixRoomQuery) Count(ctx context.Context) (int, error) {
	if err := frq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return frq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (frq *FixRoomQuery) CountX(ctx context.Context) int {
	count, err := frq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (frq *FixRoomQuery) Exist(ctx context.Context) (bool, error) {
	if err := frq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return frq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (frq *FixRoomQuery) ExistX(ctx context.Context) bool {
	exist, err := frq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (frq *FixRoomQuery) Clone() *FixRoomQuery {
	return &FixRoomQuery{
		config:     frq.config,
		limit:      frq.limit,
		offset:     frq.offset,
		order:      append([]OrderFunc{}, frq.order...),
		unique:     append([]string{}, frq.unique...),
		predicates: append([]predicate.FixRoom{}, frq.predicates...),
		// clone intermediate query.
		sql:  frq.sql.Clone(),
		path: frq.path,
	}
}

//  WithCustomer tells the query-builder to eager-loads the nodes that are connected to
// the "customer" edge. The optional arguments used to configure the query builder of the edge.
func (frq *FixRoomQuery) WithCustomer(opts ...func(*CustomerQuery)) *FixRoomQuery {
	query := &CustomerQuery{config: frq.config}
	for _, opt := range opts {
		opt(query)
	}
	frq.withCustomer = query
	return frq
}

//  WithFurnitureDetail tells the query-builder to eager-loads the nodes that are connected to
// the "furnitureDetail" edge. The optional arguments used to configure the query builder of the edge.
func (frq *FixRoomQuery) WithFurnitureDetail(opts ...func(*FurnitureDetailQuery)) *FixRoomQuery {
	query := &FurnitureDetailQuery{config: frq.config}
	for _, opt := range opts {
		opt(query)
	}
	frq.withFurnitureDetail = query
	return frq
}

//  WithRoom tells the query-builder to eager-loads the nodes that are connected to
// the "room" edge. The optional arguments used to configure the query builder of the edge.
func (frq *FixRoomQuery) WithRoom(opts ...func(*DataRoomQuery)) *FixRoomQuery {
	query := &DataRoomQuery{config: frq.config}
	for _, opt := range opts {
		opt(query)
	}
	frq.withRoom = query
	return frq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FixDetail string `json:"fix_detail,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FixRoom.Query().
//		GroupBy(fixroom.FieldFixDetail).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (frq *FixRoomQuery) GroupBy(field string, fields ...string) *FixRoomGroupBy {
	group := &FixRoomGroupBy{config: frq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := frq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return frq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		FixDetail string `json:"fix_detail,omitempty"`
//	}
//
//	client.FixRoom.Query().
//		Select(fixroom.FieldFixDetail).
//		Scan(ctx, &v)
//
func (frq *FixRoomQuery) Select(field string, fields ...string) *FixRoomSelect {
	selector := &FixRoomSelect{config: frq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := frq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return frq.sqlQuery(), nil
	}
	return selector
}

func (frq *FixRoomQuery) prepareQuery(ctx context.Context) error {
	if frq.path != nil {
		prev, err := frq.path(ctx)
		if err != nil {
			return err
		}
		frq.sql = prev
	}
	return nil
}

func (frq *FixRoomQuery) sqlAll(ctx context.Context) ([]*FixRoom, error) {
	var (
		nodes       = []*FixRoom{}
		withFKs     = frq.withFKs
		_spec       = frq.querySpec()
		loadedTypes = [3]bool{
			frq.withCustomer != nil,
			frq.withFurnitureDetail != nil,
			frq.withRoom != nil,
		}
	)
	if frq.withCustomer != nil || frq.withFurnitureDetail != nil || frq.withRoom != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, fixroom.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &FixRoom{config: frq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, frq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := frq.withCustomer; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*FixRoom)
		for i := range nodes {
			if fk := nodes[i].customer_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(customer.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Customer = n
			}
		}
	}

	if query := frq.withFurnitureDetail; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*FixRoom)
		for i := range nodes {
			if fk := nodes[i].object_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(furnituredetail.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "object_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.FurnitureDetail = n
			}
		}
	}

	if query := frq.withRoom; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*FixRoom)
		for i := range nodes {
			if fk := nodes[i].room_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(dataroom.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "room_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Room = n
			}
		}
	}

	return nodes, nil
}

func (frq *FixRoomQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := frq.querySpec()
	return sqlgraph.CountNodes(ctx, frq.driver, _spec)
}

func (frq *FixRoomQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := frq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (frq *FixRoomQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fixroom.Table,
			Columns: fixroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fixroom.FieldID,
			},
		},
		From:   frq.sql,
		Unique: true,
	}
	if ps := frq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := frq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := frq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := frq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (frq *FixRoomQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(frq.driver.Dialect())
	t1 := builder.Table(fixroom.Table)
	selector := builder.Select(t1.Columns(fixroom.Columns...)...).From(t1)
	if frq.sql != nil {
		selector = frq.sql
		selector.Select(selector.Columns(fixroom.Columns...)...)
	}
	for _, p := range frq.predicates {
		p(selector)
	}
	for _, p := range frq.order {
		p(selector)
	}
	if offset := frq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := frq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FixRoomGroupBy is the builder for group-by FixRoom entities.
type FixRoomGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (frgb *FixRoomGroupBy) Aggregate(fns ...AggregateFunc) *FixRoomGroupBy {
	frgb.fns = append(frgb.fns, fns...)
	return frgb
}

// Scan applies the group-by query and scan the result into the given value.
func (frgb *FixRoomGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := frgb.path(ctx)
	if err != nil {
		return err
	}
	frgb.sql = query
	return frgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (frgb *FixRoomGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := frgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (frgb *FixRoomGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(frgb.fields) > 1 {
		return nil, errors.New("ent: FixRoomGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := frgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (frgb *FixRoomGroupBy) StringsX(ctx context.Context) []string {
	v, err := frgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (frgb *FixRoomGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = frgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fixroom.Label}
	default:
		err = fmt.Errorf("ent: FixRoomGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (frgb *FixRoomGroupBy) StringX(ctx context.Context) string {
	v, err := frgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (frgb *FixRoomGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(frgb.fields) > 1 {
		return nil, errors.New("ent: FixRoomGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := frgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (frgb *FixRoomGroupBy) IntsX(ctx context.Context) []int {
	v, err := frgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (frgb *FixRoomGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = frgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fixroom.Label}
	default:
		err = fmt.Errorf("ent: FixRoomGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (frgb *FixRoomGroupBy) IntX(ctx context.Context) int {
	v, err := frgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (frgb *FixRoomGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(frgb.fields) > 1 {
		return nil, errors.New("ent: FixRoomGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := frgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (frgb *FixRoomGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := frgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (frgb *FixRoomGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = frgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fixroom.Label}
	default:
		err = fmt.Errorf("ent: FixRoomGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (frgb *FixRoomGroupBy) Float64X(ctx context.Context) float64 {
	v, err := frgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (frgb *FixRoomGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(frgb.fields) > 1 {
		return nil, errors.New("ent: FixRoomGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := frgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (frgb *FixRoomGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := frgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (frgb *FixRoomGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = frgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fixroom.Label}
	default:
		err = fmt.Errorf("ent: FixRoomGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (frgb *FixRoomGroupBy) BoolX(ctx context.Context) bool {
	v, err := frgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (frgb *FixRoomGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := frgb.sqlQuery().Query()
	if err := frgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (frgb *FixRoomGroupBy) sqlQuery() *sql.Selector {
	selector := frgb.sql
	columns := make([]string, 0, len(frgb.fields)+len(frgb.fns))
	columns = append(columns, frgb.fields...)
	for _, fn := range frgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(frgb.fields...)
}

// FixRoomSelect is the builder for select fields of FixRoom entities.
type FixRoomSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (frs *FixRoomSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := frs.path(ctx)
	if err != nil {
		return err
	}
	frs.sql = query
	return frs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (frs *FixRoomSelect) ScanX(ctx context.Context, v interface{}) {
	if err := frs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (frs *FixRoomSelect) Strings(ctx context.Context) ([]string, error) {
	if len(frs.fields) > 1 {
		return nil, errors.New("ent: FixRoomSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := frs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (frs *FixRoomSelect) StringsX(ctx context.Context) []string {
	v, err := frs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (frs *FixRoomSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = frs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fixroom.Label}
	default:
		err = fmt.Errorf("ent: FixRoomSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (frs *FixRoomSelect) StringX(ctx context.Context) string {
	v, err := frs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (frs *FixRoomSelect) Ints(ctx context.Context) ([]int, error) {
	if len(frs.fields) > 1 {
		return nil, errors.New("ent: FixRoomSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := frs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (frs *FixRoomSelect) IntsX(ctx context.Context) []int {
	v, err := frs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (frs *FixRoomSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = frs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fixroom.Label}
	default:
		err = fmt.Errorf("ent: FixRoomSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (frs *FixRoomSelect) IntX(ctx context.Context) int {
	v, err := frs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (frs *FixRoomSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(frs.fields) > 1 {
		return nil, errors.New("ent: FixRoomSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := frs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (frs *FixRoomSelect) Float64sX(ctx context.Context) []float64 {
	v, err := frs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (frs *FixRoomSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = frs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fixroom.Label}
	default:
		err = fmt.Errorf("ent: FixRoomSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (frs *FixRoomSelect) Float64X(ctx context.Context) float64 {
	v, err := frs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (frs *FixRoomSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(frs.fields) > 1 {
		return nil, errors.New("ent: FixRoomSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := frs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (frs *FixRoomSelect) BoolsX(ctx context.Context) []bool {
	v, err := frs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (frs *FixRoomSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = frs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{fixroom.Label}
	default:
		err = fmt.Errorf("ent: FixRoomSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (frs *FixRoomSelect) BoolX(ctx context.Context) bool {
	v, err := frs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (frs *FixRoomSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := frs.sqlQuery().Query()
	if err := frs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (frs *FixRoomSelect) sqlQuery() sql.Querier {
	selector := frs.sql
	selector.Select(selector.Columns(frs.fields...)...)
	return selector
}
