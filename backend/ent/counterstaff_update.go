// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/checkin"
	"github.com/team18/app/ent/checkout"
	"github.com/team18/app/ent/counterstaff"
	"github.com/team18/app/ent/furnituredetail"
	"github.com/team18/app/ent/predicate"
)

// CounterStaffUpdate is the builder for updating CounterStaff entities.
type CounterStaffUpdate struct {
	config
	hooks      []Hook
	mutation   *CounterStaffMutation
	predicates []predicate.CounterStaff
}

// Where adds a new predicate for the builder.
func (csu *CounterStaffUpdate) Where(ps ...predicate.CounterStaff) *CounterStaffUpdate {
	csu.predicates = append(csu.predicates, ps...)
	return csu
}

// SetName sets the name field.
func (csu *CounterStaffUpdate) SetName(s string) *CounterStaffUpdate {
	csu.mutation.SetName(s)
	return csu
}

// SetEmail sets the email field.
func (csu *CounterStaffUpdate) SetEmail(s string) *CounterStaffUpdate {
	csu.mutation.SetEmail(s)
	return csu
}

// SetPassword sets the password field.
func (csu *CounterStaffUpdate) SetPassword(s string) *CounterStaffUpdate {
	csu.mutation.SetPassword(s)
	return csu
}

// AddCheckinIDs adds the checkins edge to CheckIn by ids.
func (csu *CounterStaffUpdate) AddCheckinIDs(ids ...int) *CounterStaffUpdate {
	csu.mutation.AddCheckinIDs(ids...)
	return csu
}

// AddCheckins adds the checkins edges to CheckIn.
func (csu *CounterStaffUpdate) AddCheckins(c ...*CheckIn) *CounterStaffUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.AddCheckinIDs(ids...)
}

// AddCheckoutIDs adds the checkouts edge to Checkout by ids.
func (csu *CounterStaffUpdate) AddCheckoutIDs(ids ...int) *CounterStaffUpdate {
	csu.mutation.AddCheckoutIDs(ids...)
	return csu
}

// AddCheckouts adds the checkouts edges to Checkout.
func (csu *CounterStaffUpdate) AddCheckouts(c ...*Checkout) *CounterStaffUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.AddCheckoutIDs(ids...)
}

// AddDetailIDs adds the details edge to FurnitureDetail by ids.
func (csu *CounterStaffUpdate) AddDetailIDs(ids ...int) *CounterStaffUpdate {
	csu.mutation.AddDetailIDs(ids...)
	return csu
}

// AddDetails adds the details edges to FurnitureDetail.
func (csu *CounterStaffUpdate) AddDetails(f ...*FurnitureDetail) *CounterStaffUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return csu.AddDetailIDs(ids...)
}

// Mutation returns the CounterStaffMutation object of the builder.
func (csu *CounterStaffUpdate) Mutation() *CounterStaffMutation {
	return csu.mutation
}

// RemoveCheckinIDs removes the checkins edge to CheckIn by ids.
func (csu *CounterStaffUpdate) RemoveCheckinIDs(ids ...int) *CounterStaffUpdate {
	csu.mutation.RemoveCheckinIDs(ids...)
	return csu
}

// RemoveCheckins removes checkins edges to CheckIn.
func (csu *CounterStaffUpdate) RemoveCheckins(c ...*CheckIn) *CounterStaffUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.RemoveCheckinIDs(ids...)
}

// RemoveCheckoutIDs removes the checkouts edge to Checkout by ids.
func (csu *CounterStaffUpdate) RemoveCheckoutIDs(ids ...int) *CounterStaffUpdate {
	csu.mutation.RemoveCheckoutIDs(ids...)
	return csu
}

// RemoveCheckouts removes checkouts edges to Checkout.
func (csu *CounterStaffUpdate) RemoveCheckouts(c ...*Checkout) *CounterStaffUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.RemoveCheckoutIDs(ids...)
}

// RemoveDetailIDs removes the details edge to FurnitureDetail by ids.
func (csu *CounterStaffUpdate) RemoveDetailIDs(ids ...int) *CounterStaffUpdate {
	csu.mutation.RemoveDetailIDs(ids...)
	return csu
}

// RemoveDetails removes details edges to FurnitureDetail.
func (csu *CounterStaffUpdate) RemoveDetails(f ...*FurnitureDetail) *CounterStaffUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return csu.RemoveDetailIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (csu *CounterStaffUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := csu.mutation.Name(); ok {
		if err := counterstaff.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := csu.mutation.Email(); ok {
		if err := counterstaff.EmailValidator(v); err != nil {
			return 0, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := csu.mutation.Password(); ok {
		if err := counterstaff.PasswordValidator(v); err != nil {
			return 0, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(csu.hooks) == 0 {
		affected, err = csu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterStaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csu.mutation = mutation
			affected, err = csu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(csu.hooks) - 1; i >= 0; i-- {
			mut = csu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CounterStaffUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CounterStaffUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CounterStaffUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csu *CounterStaffUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   counterstaff.Table,
			Columns: counterstaff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counterstaff.FieldID,
			},
		},
	}
	if ps := csu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterstaff.FieldName,
		})
	}
	if value, ok := csu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterstaff.FieldEmail,
		})
	}
	if value, ok := csu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterstaff.FieldPassword,
		})
	}
	if nodes := csu.mutation.RemovedCheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.CheckinsTable,
			Columns: []string{counterstaff.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.CheckinsTable,
			Columns: []string{counterstaff.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := csu.mutation.RemovedCheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.CheckoutsTable,
			Columns: []string{counterstaff.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.CheckoutsTable,
			Columns: []string{counterstaff.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := csu.mutation.RemovedDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.DetailsTable,
			Columns: []string{counterstaff.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituredetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.DetailsTable,
			Columns: []string{counterstaff.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituredetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{counterstaff.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CounterStaffUpdateOne is the builder for updating a single CounterStaff entity.
type CounterStaffUpdateOne struct {
	config
	hooks    []Hook
	mutation *CounterStaffMutation
}

// SetName sets the name field.
func (csuo *CounterStaffUpdateOne) SetName(s string) *CounterStaffUpdateOne {
	csuo.mutation.SetName(s)
	return csuo
}

// SetEmail sets the email field.
func (csuo *CounterStaffUpdateOne) SetEmail(s string) *CounterStaffUpdateOne {
	csuo.mutation.SetEmail(s)
	return csuo
}

// SetPassword sets the password field.
func (csuo *CounterStaffUpdateOne) SetPassword(s string) *CounterStaffUpdateOne {
	csuo.mutation.SetPassword(s)
	return csuo
}

// AddCheckinIDs adds the checkins edge to CheckIn by ids.
func (csuo *CounterStaffUpdateOne) AddCheckinIDs(ids ...int) *CounterStaffUpdateOne {
	csuo.mutation.AddCheckinIDs(ids...)
	return csuo
}

// AddCheckins adds the checkins edges to CheckIn.
func (csuo *CounterStaffUpdateOne) AddCheckins(c ...*CheckIn) *CounterStaffUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.AddCheckinIDs(ids...)
}

// AddCheckoutIDs adds the checkouts edge to Checkout by ids.
func (csuo *CounterStaffUpdateOne) AddCheckoutIDs(ids ...int) *CounterStaffUpdateOne {
	csuo.mutation.AddCheckoutIDs(ids...)
	return csuo
}

// AddCheckouts adds the checkouts edges to Checkout.
func (csuo *CounterStaffUpdateOne) AddCheckouts(c ...*Checkout) *CounterStaffUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.AddCheckoutIDs(ids...)
}

// AddDetailIDs adds the details edge to FurnitureDetail by ids.
func (csuo *CounterStaffUpdateOne) AddDetailIDs(ids ...int) *CounterStaffUpdateOne {
	csuo.mutation.AddDetailIDs(ids...)
	return csuo
}

// AddDetails adds the details edges to FurnitureDetail.
func (csuo *CounterStaffUpdateOne) AddDetails(f ...*FurnitureDetail) *CounterStaffUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return csuo.AddDetailIDs(ids...)
}

// Mutation returns the CounterStaffMutation object of the builder.
func (csuo *CounterStaffUpdateOne) Mutation() *CounterStaffMutation {
	return csuo.mutation
}

// RemoveCheckinIDs removes the checkins edge to CheckIn by ids.
func (csuo *CounterStaffUpdateOne) RemoveCheckinIDs(ids ...int) *CounterStaffUpdateOne {
	csuo.mutation.RemoveCheckinIDs(ids...)
	return csuo
}

// RemoveCheckins removes checkins edges to CheckIn.
func (csuo *CounterStaffUpdateOne) RemoveCheckins(c ...*CheckIn) *CounterStaffUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.RemoveCheckinIDs(ids...)
}

// RemoveCheckoutIDs removes the checkouts edge to Checkout by ids.
func (csuo *CounterStaffUpdateOne) RemoveCheckoutIDs(ids ...int) *CounterStaffUpdateOne {
	csuo.mutation.RemoveCheckoutIDs(ids...)
	return csuo
}

// RemoveCheckouts removes checkouts edges to Checkout.
func (csuo *CounterStaffUpdateOne) RemoveCheckouts(c ...*Checkout) *CounterStaffUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.RemoveCheckoutIDs(ids...)
}

// RemoveDetailIDs removes the details edge to FurnitureDetail by ids.
func (csuo *CounterStaffUpdateOne) RemoveDetailIDs(ids ...int) *CounterStaffUpdateOne {
	csuo.mutation.RemoveDetailIDs(ids...)
	return csuo
}

// RemoveDetails removes details edges to FurnitureDetail.
func (csuo *CounterStaffUpdateOne) RemoveDetails(f ...*FurnitureDetail) *CounterStaffUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return csuo.RemoveDetailIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (csuo *CounterStaffUpdateOne) Save(ctx context.Context) (*CounterStaff, error) {
	if v, ok := csuo.mutation.Name(); ok {
		if err := counterstaff.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := csuo.mutation.Email(); ok {
		if err := counterstaff.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := csuo.mutation.Password(); ok {
		if err := counterstaff.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}

	var (
		err  error
		node *CounterStaff
	)
	if len(csuo.hooks) == 0 {
		node, err = csuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterStaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csuo.mutation = mutation
			node, err = csuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csuo.hooks) - 1; i >= 0; i-- {
			mut = csuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CounterStaffUpdateOne) SaveX(ctx context.Context) *CounterStaff {
	cs, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return cs
}

// Exec executes the query on the entity.
func (csuo *CounterStaffUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CounterStaffUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csuo *CounterStaffUpdateOne) sqlSave(ctx context.Context) (cs *CounterStaff, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   counterstaff.Table,
			Columns: counterstaff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counterstaff.FieldID,
			},
		},
	}
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CounterStaff.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := csuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterstaff.FieldName,
		})
	}
	if value, ok := csuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterstaff.FieldEmail,
		})
	}
	if value, ok := csuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterstaff.FieldPassword,
		})
	}
	if nodes := csuo.mutation.RemovedCheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.CheckinsTable,
			Columns: []string{counterstaff.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.CheckinsTable,
			Columns: []string{counterstaff.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := csuo.mutation.RemovedCheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.CheckoutsTable,
			Columns: []string{counterstaff.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.CheckoutsTable,
			Columns: []string{counterstaff.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := csuo.mutation.RemovedDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.DetailsTable,
			Columns: []string{counterstaff.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituredetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterstaff.DetailsTable,
			Columns: []string{counterstaff.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: furnituredetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	cs = &CounterStaff{config: csuo.config}
	_spec.Assign = cs.assignValues
	_spec.ScanValues = cs.scanValues()
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{counterstaff.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return cs, nil
}
