// Code generated by entc, DO NOT EDIT.

package furnituredetail

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team18/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DateAdd applies equality check predicate on the "date_add" field. It's identical to DateAddEQ.
func DateAdd(v time.Time) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateAdd), v))
	})
}

// DateAddEQ applies the EQ predicate on the "date_add" field.
func DateAddEQ(v time.Time) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateAdd), v))
	})
}

// DateAddNEQ applies the NEQ predicate on the "date_add" field.
func DateAddNEQ(v time.Time) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateAdd), v))
	})
}

// DateAddIn applies the In predicate on the "date_add" field.
func DateAddIn(vs ...time.Time) predicate.FurnitureDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateAdd), v...))
	})
}

// DateAddNotIn applies the NotIn predicate on the "date_add" field.
func DateAddNotIn(vs ...time.Time) predicate.FurnitureDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateAdd), v...))
	})
}

// DateAddGT applies the GT predicate on the "date_add" field.
func DateAddGT(v time.Time) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateAdd), v))
	})
}

// DateAddGTE applies the GTE predicate on the "date_add" field.
func DateAddGTE(v time.Time) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateAdd), v))
	})
}

// DateAddLT applies the LT predicate on the "date_add" field.
func DateAddLT(v time.Time) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateAdd), v))
	})
}

// DateAddLTE applies the LTE predicate on the "date_add" field.
func DateAddLTE(v time.Time) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateAdd), v))
	})
}

// HasFixs applies the HasEdge predicate on the "fixs" edge.
func HasFixs() predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FixsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FixsTable, FixsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFixsWith applies the HasEdge predicate on the "fixs" edge with a given conditions (other predicates).
func HasFixsWith(preds ...predicate.FixRoom) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FixsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FixsTable, FixsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFurnitures applies the HasEdge predicate on the "furnitures" edge.
func HasFurnitures() predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FurnituresTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FurnituresTable, FurnituresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFurnituresWith applies the HasEdge predicate on the "furnitures" edge with a given conditions (other predicates).
func HasFurnituresWith(preds ...predicate.Furniture) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FurnituresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FurnituresTable, FurnituresColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCounterstaffs applies the HasEdge predicate on the "counterstaffs" edge.
func HasCounterstaffs() predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterstaffsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CounterstaffsTable, CounterstaffsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCounterstaffsWith applies the HasEdge predicate on the "counterstaffs" edge with a given conditions (other predicates).
func HasCounterstaffsWith(preds ...predicate.CounterStaff) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterstaffsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CounterstaffsTable, CounterstaffsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTypes applies the HasEdge predicate on the "types" edge.
func HasTypes() predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TypesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TypesTable, TypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTypesWith applies the HasEdge predicate on the "types" edge with a given conditions (other predicates).
func HasTypesWith(preds ...predicate.FurnitureType) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TypesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TypesTable, TypesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRooms applies the HasEdge predicate on the "rooms" edge.
func HasRooms() predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomsTable, RoomsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomsWith applies the HasEdge predicate on the "rooms" edge with a given conditions (other predicates).
func HasRoomsWith(preds ...predicate.DataRoom) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomsTable, RoomsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.FurnitureDetail) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.FurnitureDetail) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FurnitureDetail) predicate.FurnitureDetail {
	return predicate.FurnitureDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
