// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/checkin"
	"github.com/team18/app/ent/checkout"
	"github.com/team18/app/ent/counterstaff"
	"github.com/team18/app/ent/customer"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/predicate"
	"github.com/team18/app/ent/reserveroom"
	"github.com/team18/app/ent/statuscheckin"
)

// CheckInUpdate is the builder for updating CheckIn entities.
type CheckInUpdate struct {
	config
	hooks      []Hook
	mutation   *CheckInMutation
	predicates []predicate.CheckIn
}

// Where adds a new predicate for the builder.
func (ciu *CheckInUpdate) Where(ps ...predicate.CheckIn) *CheckInUpdate {
	ciu.predicates = append(ciu.predicates, ps...)
	return ciu
}

// SetCheckinDate sets the checkin_date field.
func (ciu *CheckInUpdate) SetCheckinDate(t time.Time) *CheckInUpdate {
	ciu.mutation.SetCheckinDate(t)
	return ciu
}

// SetCustomerID sets the customer edge to Customer by id.
func (ciu *CheckInUpdate) SetCustomerID(id int) *CheckInUpdate {
	ciu.mutation.SetCustomerID(id)
	return ciu
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (ciu *CheckInUpdate) SetNillableCustomerID(id *int) *CheckInUpdate {
	if id != nil {
		ciu = ciu.SetCustomerID(*id)
	}
	return ciu
}

// SetCustomer sets the customer edge to Customer.
func (ciu *CheckInUpdate) SetCustomer(c *Customer) *CheckInUpdate {
	return ciu.SetCustomerID(c.ID)
}

// SetCounterID sets the counter edge to CounterStaff by id.
func (ciu *CheckInUpdate) SetCounterID(id int) *CheckInUpdate {
	ciu.mutation.SetCounterID(id)
	return ciu
}

// SetNillableCounterID sets the counter edge to CounterStaff by id if the given value is not nil.
func (ciu *CheckInUpdate) SetNillableCounterID(id *int) *CheckInUpdate {
	if id != nil {
		ciu = ciu.SetCounterID(*id)
	}
	return ciu
}

// SetCounter sets the counter edge to CounterStaff.
func (ciu *CheckInUpdate) SetCounter(c *CounterStaff) *CheckInUpdate {
	return ciu.SetCounterID(c.ID)
}

// SetReserveroomID sets the reserveroom edge to ReserveRoom by id.
func (ciu *CheckInUpdate) SetReserveroomID(id int) *CheckInUpdate {
	ciu.mutation.SetReserveroomID(id)
	return ciu
}

// SetNillableReserveroomID sets the reserveroom edge to ReserveRoom by id if the given value is not nil.
func (ciu *CheckInUpdate) SetNillableReserveroomID(id *int) *CheckInUpdate {
	if id != nil {
		ciu = ciu.SetReserveroomID(*id)
	}
	return ciu
}

// SetReserveroom sets the reserveroom edge to ReserveRoom.
func (ciu *CheckInUpdate) SetReserveroom(r *ReserveRoom) *CheckInUpdate {
	return ciu.SetReserveroomID(r.ID)
}

// SetDataroomID sets the dataroom edge to DataRoom by id.
func (ciu *CheckInUpdate) SetDataroomID(id int) *CheckInUpdate {
	ciu.mutation.SetDataroomID(id)
	return ciu
}

// SetNillableDataroomID sets the dataroom edge to DataRoom by id if the given value is not nil.
func (ciu *CheckInUpdate) SetNillableDataroomID(id *int) *CheckInUpdate {
	if id != nil {
		ciu = ciu.SetDataroomID(*id)
	}
	return ciu
}

// SetDataroom sets the dataroom edge to DataRoom.
func (ciu *CheckInUpdate) SetDataroom(d *DataRoom) *CheckInUpdate {
	return ciu.SetDataroomID(d.ID)
}

// SetStatusID sets the status edge to StatusCheckIn by id.
func (ciu *CheckInUpdate) SetStatusID(id int) *CheckInUpdate {
	ciu.mutation.SetStatusID(id)
	return ciu
}

// SetNillableStatusID sets the status edge to StatusCheckIn by id if the given value is not nil.
func (ciu *CheckInUpdate) SetNillableStatusID(id *int) *CheckInUpdate {
	if id != nil {
		ciu = ciu.SetStatusID(*id)
	}
	return ciu
}

// SetStatus sets the status edge to StatusCheckIn.
func (ciu *CheckInUpdate) SetStatus(s *StatusCheckIn) *CheckInUpdate {
	return ciu.SetStatusID(s.ID)
}

// SetCheckoutsID sets the checkouts edge to Checkout by id.
func (ciu *CheckInUpdate) SetCheckoutsID(id int) *CheckInUpdate {
	ciu.mutation.SetCheckoutsID(id)
	return ciu
}

// SetNillableCheckoutsID sets the checkouts edge to Checkout by id if the given value is not nil.
func (ciu *CheckInUpdate) SetNillableCheckoutsID(id *int) *CheckInUpdate {
	if id != nil {
		ciu = ciu.SetCheckoutsID(*id)
	}
	return ciu
}

// SetCheckouts sets the checkouts edge to Checkout.
func (ciu *CheckInUpdate) SetCheckouts(c *Checkout) *CheckInUpdate {
	return ciu.SetCheckoutsID(c.ID)
}

// Mutation returns the CheckInMutation object of the builder.
func (ciu *CheckInUpdate) Mutation() *CheckInMutation {
	return ciu.mutation
}

// ClearCustomer clears the customer edge to Customer.
func (ciu *CheckInUpdate) ClearCustomer() *CheckInUpdate {
	ciu.mutation.ClearCustomer()
	return ciu
}

// ClearCounter clears the counter edge to CounterStaff.
func (ciu *CheckInUpdate) ClearCounter() *CheckInUpdate {
	ciu.mutation.ClearCounter()
	return ciu
}

// ClearReserveroom clears the reserveroom edge to ReserveRoom.
func (ciu *CheckInUpdate) ClearReserveroom() *CheckInUpdate {
	ciu.mutation.ClearReserveroom()
	return ciu
}

// ClearDataroom clears the dataroom edge to DataRoom.
func (ciu *CheckInUpdate) ClearDataroom() *CheckInUpdate {
	ciu.mutation.ClearDataroom()
	return ciu
}

// ClearStatus clears the status edge to StatusCheckIn.
func (ciu *CheckInUpdate) ClearStatus() *CheckInUpdate {
	ciu.mutation.ClearStatus()
	return ciu
}

// ClearCheckouts clears the checkouts edge to Checkout.
func (ciu *CheckInUpdate) ClearCheckouts() *CheckInUpdate {
	ciu.mutation.ClearCheckouts()
	return ciu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ciu *CheckInUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ciu.hooks) == 0 {
		affected, err = ciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckInMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciu.mutation = mutation
			affected, err = ciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ciu.hooks) - 1; i >= 0; i-- {
			mut = ciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CheckInUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CheckInUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CheckInUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciu *CheckInUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checkin.Table,
			Columns: checkin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkin.FieldID,
			},
		},
	}
	if ps := ciu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.CheckinDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkin.FieldCheckinDate,
		})
	}
	if ciu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.CustomerTable,
			Columns: []string{checkin.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.CustomerTable,
			Columns: []string{checkin.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.CounterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.CounterTable,
			Columns: []string{checkin.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.CounterTable,
			Columns: []string{checkin.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.ReserveroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.ReserveroomTable,
			Columns: []string{checkin.ReserveroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reserveroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.ReserveroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.ReserveroomTable,
			Columns: []string{checkin.ReserveroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reserveroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.DataroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.DataroomTable,
			Columns: []string{checkin.DataroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.DataroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.DataroomTable,
			Columns: []string{checkin.DataroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.StatusTable,
			Columns: []string{checkin.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuscheckin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.StatusTable,
			Columns: []string{checkin.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuscheckin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   checkin.CheckoutsTable,
			Columns: []string{checkin.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   checkin.CheckoutsTable,
			Columns: []string{checkin.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkin.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CheckInUpdateOne is the builder for updating a single CheckIn entity.
type CheckInUpdateOne struct {
	config
	hooks    []Hook
	mutation *CheckInMutation
}

// SetCheckinDate sets the checkin_date field.
func (ciuo *CheckInUpdateOne) SetCheckinDate(t time.Time) *CheckInUpdateOne {
	ciuo.mutation.SetCheckinDate(t)
	return ciuo
}

// SetCustomerID sets the customer edge to Customer by id.
func (ciuo *CheckInUpdateOne) SetCustomerID(id int) *CheckInUpdateOne {
	ciuo.mutation.SetCustomerID(id)
	return ciuo
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (ciuo *CheckInUpdateOne) SetNillableCustomerID(id *int) *CheckInUpdateOne {
	if id != nil {
		ciuo = ciuo.SetCustomerID(*id)
	}
	return ciuo
}

// SetCustomer sets the customer edge to Customer.
func (ciuo *CheckInUpdateOne) SetCustomer(c *Customer) *CheckInUpdateOne {
	return ciuo.SetCustomerID(c.ID)
}

// SetCounterID sets the counter edge to CounterStaff by id.
func (ciuo *CheckInUpdateOne) SetCounterID(id int) *CheckInUpdateOne {
	ciuo.mutation.SetCounterID(id)
	return ciuo
}

// SetNillableCounterID sets the counter edge to CounterStaff by id if the given value is not nil.
func (ciuo *CheckInUpdateOne) SetNillableCounterID(id *int) *CheckInUpdateOne {
	if id != nil {
		ciuo = ciuo.SetCounterID(*id)
	}
	return ciuo
}

// SetCounter sets the counter edge to CounterStaff.
func (ciuo *CheckInUpdateOne) SetCounter(c *CounterStaff) *CheckInUpdateOne {
	return ciuo.SetCounterID(c.ID)
}

// SetReserveroomID sets the reserveroom edge to ReserveRoom by id.
func (ciuo *CheckInUpdateOne) SetReserveroomID(id int) *CheckInUpdateOne {
	ciuo.mutation.SetReserveroomID(id)
	return ciuo
}

// SetNillableReserveroomID sets the reserveroom edge to ReserveRoom by id if the given value is not nil.
func (ciuo *CheckInUpdateOne) SetNillableReserveroomID(id *int) *CheckInUpdateOne {
	if id != nil {
		ciuo = ciuo.SetReserveroomID(*id)
	}
	return ciuo
}

// SetReserveroom sets the reserveroom edge to ReserveRoom.
func (ciuo *CheckInUpdateOne) SetReserveroom(r *ReserveRoom) *CheckInUpdateOne {
	return ciuo.SetReserveroomID(r.ID)
}

// SetDataroomID sets the dataroom edge to DataRoom by id.
func (ciuo *CheckInUpdateOne) SetDataroomID(id int) *CheckInUpdateOne {
	ciuo.mutation.SetDataroomID(id)
	return ciuo
}

// SetNillableDataroomID sets the dataroom edge to DataRoom by id if the given value is not nil.
func (ciuo *CheckInUpdateOne) SetNillableDataroomID(id *int) *CheckInUpdateOne {
	if id != nil {
		ciuo = ciuo.SetDataroomID(*id)
	}
	return ciuo
}

// SetDataroom sets the dataroom edge to DataRoom.
func (ciuo *CheckInUpdateOne) SetDataroom(d *DataRoom) *CheckInUpdateOne {
	return ciuo.SetDataroomID(d.ID)
}

// SetStatusID sets the status edge to StatusCheckIn by id.
func (ciuo *CheckInUpdateOne) SetStatusID(id int) *CheckInUpdateOne {
	ciuo.mutation.SetStatusID(id)
	return ciuo
}

// SetNillableStatusID sets the status edge to StatusCheckIn by id if the given value is not nil.
func (ciuo *CheckInUpdateOne) SetNillableStatusID(id *int) *CheckInUpdateOne {
	if id != nil {
		ciuo = ciuo.SetStatusID(*id)
	}
	return ciuo
}

// SetStatus sets the status edge to StatusCheckIn.
func (ciuo *CheckInUpdateOne) SetStatus(s *StatusCheckIn) *CheckInUpdateOne {
	return ciuo.SetStatusID(s.ID)
}

// SetCheckoutsID sets the checkouts edge to Checkout by id.
func (ciuo *CheckInUpdateOne) SetCheckoutsID(id int) *CheckInUpdateOne {
	ciuo.mutation.SetCheckoutsID(id)
	return ciuo
}

// SetNillableCheckoutsID sets the checkouts edge to Checkout by id if the given value is not nil.
func (ciuo *CheckInUpdateOne) SetNillableCheckoutsID(id *int) *CheckInUpdateOne {
	if id != nil {
		ciuo = ciuo.SetCheckoutsID(*id)
	}
	return ciuo
}

// SetCheckouts sets the checkouts edge to Checkout.
func (ciuo *CheckInUpdateOne) SetCheckouts(c *Checkout) *CheckInUpdateOne {
	return ciuo.SetCheckoutsID(c.ID)
}

// Mutation returns the CheckInMutation object of the builder.
func (ciuo *CheckInUpdateOne) Mutation() *CheckInMutation {
	return ciuo.mutation
}

// ClearCustomer clears the customer edge to Customer.
func (ciuo *CheckInUpdateOne) ClearCustomer() *CheckInUpdateOne {
	ciuo.mutation.ClearCustomer()
	return ciuo
}

// ClearCounter clears the counter edge to CounterStaff.
func (ciuo *CheckInUpdateOne) ClearCounter() *CheckInUpdateOne {
	ciuo.mutation.ClearCounter()
	return ciuo
}

// ClearReserveroom clears the reserveroom edge to ReserveRoom.
func (ciuo *CheckInUpdateOne) ClearReserveroom() *CheckInUpdateOne {
	ciuo.mutation.ClearReserveroom()
	return ciuo
}

// ClearDataroom clears the dataroom edge to DataRoom.
func (ciuo *CheckInUpdateOne) ClearDataroom() *CheckInUpdateOne {
	ciuo.mutation.ClearDataroom()
	return ciuo
}

// ClearStatus clears the status edge to StatusCheckIn.
func (ciuo *CheckInUpdateOne) ClearStatus() *CheckInUpdateOne {
	ciuo.mutation.ClearStatus()
	return ciuo
}

// ClearCheckouts clears the checkouts edge to Checkout.
func (ciuo *CheckInUpdateOne) ClearCheckouts() *CheckInUpdateOne {
	ciuo.mutation.ClearCheckouts()
	return ciuo
}

// Save executes the query and returns the updated entity.
func (ciuo *CheckInUpdateOne) Save(ctx context.Context) (*CheckIn, error) {

	var (
		err  error
		node *CheckIn
	)
	if len(ciuo.hooks) == 0 {
		node, err = ciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckInMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciuo.mutation = mutation
			node, err = ciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ciuo.hooks) - 1; i >= 0; i-- {
			mut = ciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CheckInUpdateOne) SaveX(ctx context.Context) *CheckIn {
	ci, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ci
}

// Exec executes the query on the entity.
func (ciuo *CheckInUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CheckInUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciuo *CheckInUpdateOne) sqlSave(ctx context.Context) (ci *CheckIn, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checkin.Table,
			Columns: checkin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkin.FieldID,
			},
		},
	}
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CheckIn.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ciuo.mutation.CheckinDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkin.FieldCheckinDate,
		})
	}
	if ciuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.CustomerTable,
			Columns: []string{checkin.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.CustomerTable,
			Columns: []string{checkin.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.CounterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.CounterTable,
			Columns: []string{checkin.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.CounterTable,
			Columns: []string{checkin.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.ReserveroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.ReserveroomTable,
			Columns: []string{checkin.ReserveroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reserveroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.ReserveroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.ReserveroomTable,
			Columns: []string{checkin.ReserveroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reserveroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.DataroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.DataroomTable,
			Columns: []string{checkin.DataroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.DataroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.DataroomTable,
			Columns: []string{checkin.DataroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.StatusTable,
			Columns: []string{checkin.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuscheckin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.StatusTable,
			Columns: []string{checkin.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuscheckin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   checkin.CheckoutsTable,
			Columns: []string{checkin.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   checkin.CheckoutsTable,
			Columns: []string{checkin.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ci = &CheckIn{config: ciuo.config}
	_spec.Assign = ci.assignValues
	_spec.ScanValues = ci.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkin.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ci, nil
}
