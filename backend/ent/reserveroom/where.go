// Code generated by entc, DO NOT EDIT.

package reserveroom

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team18/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ReserveDate applies equality check predicate on the "reserve_date" field. It's identical to ReserveDateEQ.
func ReserveDate(v time.Time) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserveDate), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// Tel applies equality check predicate on the "tel" field. It's identical to TelEQ.
func Tel(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTel), v))
	})
}

// NetPrice applies equality check predicate on the "net_price" field. It's identical to NetPriceEQ.
func NetPrice(v float64) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetPrice), v))
	})
}

// ReserveDateEQ applies the EQ predicate on the "reserve_date" field.
func ReserveDateEQ(v time.Time) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserveDate), v))
	})
}

// ReserveDateNEQ applies the NEQ predicate on the "reserve_date" field.
func ReserveDateNEQ(v time.Time) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReserveDate), v))
	})
}

// ReserveDateIn applies the In predicate on the "reserve_date" field.
func ReserveDateIn(vs ...time.Time) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReserveDate), v...))
	})
}

// ReserveDateNotIn applies the NotIn predicate on the "reserve_date" field.
func ReserveDateNotIn(vs ...time.Time) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReserveDate), v...))
	})
}

// ReserveDateGT applies the GT predicate on the "reserve_date" field.
func ReserveDateGT(v time.Time) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReserveDate), v))
	})
}

// ReserveDateGTE applies the GTE predicate on the "reserve_date" field.
func ReserveDateGTE(v time.Time) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReserveDate), v))
	})
}

// ReserveDateLT applies the LT predicate on the "reserve_date" field.
func ReserveDateLT(v time.Time) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReserveDate), v))
	})
}

// ReserveDateLTE applies the LTE predicate on the "reserve_date" field.
func ReserveDateLTE(v time.Time) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReserveDate), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvince), v))
	})
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvince), v...))
	})
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvince), v...))
	})
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvince), v))
	})
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvince), v))
	})
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvince), v))
	})
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvince), v))
	})
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvince), v))
	})
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvince), v))
	})
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvince), v))
	})
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvince), v))
	})
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvince), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// TelEQ applies the EQ predicate on the "tel" field.
func TelEQ(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTel), v))
	})
}

// TelNEQ applies the NEQ predicate on the "tel" field.
func TelNEQ(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTel), v))
	})
}

// TelIn applies the In predicate on the "tel" field.
func TelIn(vs ...string) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTel), v...))
	})
}

// TelNotIn applies the NotIn predicate on the "tel" field.
func TelNotIn(vs ...string) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTel), v...))
	})
}

// TelGT applies the GT predicate on the "tel" field.
func TelGT(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTel), v))
	})
}

// TelGTE applies the GTE predicate on the "tel" field.
func TelGTE(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTel), v))
	})
}

// TelLT applies the LT predicate on the "tel" field.
func TelLT(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTel), v))
	})
}

// TelLTE applies the LTE predicate on the "tel" field.
func TelLTE(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTel), v))
	})
}

// TelContains applies the Contains predicate on the "tel" field.
func TelContains(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTel), v))
	})
}

// TelHasPrefix applies the HasPrefix predicate on the "tel" field.
func TelHasPrefix(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTel), v))
	})
}

// TelHasSuffix applies the HasSuffix predicate on the "tel" field.
func TelHasSuffix(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTel), v))
	})
}

// TelEqualFold applies the EqualFold predicate on the "tel" field.
func TelEqualFold(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTel), v))
	})
}

// TelContainsFold applies the ContainsFold predicate on the "tel" field.
func TelContainsFold(v string) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTel), v))
	})
}

// NetPriceEQ applies the EQ predicate on the "net_price" field.
func NetPriceEQ(v float64) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetPrice), v))
	})
}

// NetPriceNEQ applies the NEQ predicate on the "net_price" field.
func NetPriceNEQ(v float64) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNetPrice), v))
	})
}

// NetPriceIn applies the In predicate on the "net_price" field.
func NetPriceIn(vs ...float64) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNetPrice), v...))
	})
}

// NetPriceNotIn applies the NotIn predicate on the "net_price" field.
func NetPriceNotIn(vs ...float64) predicate.ReserveRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ReserveRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNetPrice), v...))
	})
}

// NetPriceGT applies the GT predicate on the "net_price" field.
func NetPriceGT(v float64) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNetPrice), v))
	})
}

// NetPriceGTE applies the GTE predicate on the "net_price" field.
func NetPriceGTE(v float64) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNetPrice), v))
	})
}

// NetPriceLT applies the LT predicate on the "net_price" field.
func NetPriceLT(v float64) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNetPrice), v))
	})
}

// NetPriceLTE applies the LTE predicate on the "net_price" field.
func NetPriceLTE(v float64) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNetPrice), v))
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPromotion applies the HasEdge predicate on the "promotion" edge.
func HasPromotion() predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PromotionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PromotionTable, PromotionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPromotionWith applies the HasEdge predicate on the "promotion" edge with a given conditions (other predicates).
func HasPromotionWith(preds ...predicate.Promotion) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PromotionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PromotionTable, PromotionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.DataRoom) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatus applies the HasEdge predicate on the "status" edge.
func HasStatus() predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.StatusReserve) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCheckins applies the HasEdge predicate on the "checkins" edge.
func HasCheckins() predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CheckinsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CheckinsTable, CheckinsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCheckinsWith applies the HasEdge predicate on the "checkins" edge with a given conditions (other predicates).
func HasCheckinsWith(preds ...predicate.CheckIn) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CheckinsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CheckinsTable, CheckinsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.ReserveRoom) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.ReserveRoom) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReserveRoom) predicate.ReserveRoom {
	return predicate.ReserveRoom(func(s *sql.Selector) {
		p(s.Not())
	})
}
