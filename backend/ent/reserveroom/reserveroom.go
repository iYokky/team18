// Code generated by entc, DO NOT EDIT.

package reserveroom

const (
	// Label holds the string label denoting the reserveroom type in the database.
	Label = "reserve_room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReserveDate holds the string denoting the reserve_date field in the database.
	FieldReserveDate = "reserve_date"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldTel holds the string denoting the tel field in the database.
	FieldTel = "tel"
	// FieldNetPrice holds the string denoting the net_price field in the database.
	FieldNetPrice = "net_price"

	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgePromotion holds the string denoting the promotion edge name in mutations.
	EdgePromotion = "promotion"
	// EdgeRoom holds the string denoting the room edge name in mutations.
	EdgeRoom = "room"
	// EdgeStatus holds the string denoting the status edge name in mutations.
	EdgeStatus = "status"
	// EdgeCheckins holds the string denoting the checkins edge name in mutations.
	EdgeCheckins = "checkins"

	// Table holds the table name of the reserveroom in the database.
	Table = "reserve_rooms"
	// CustomerTable is the table the holds the customer relation/edge.
	CustomerTable = "reserve_rooms"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// PromotionTable is the table the holds the promotion relation/edge.
	PromotionTable = "reserve_rooms"
	// PromotionInverseTable is the table name for the Promotion entity.
	// It exists in this package in order to avoid circular dependency with the "promotion" package.
	PromotionInverseTable = "promotions"
	// PromotionColumn is the table column denoting the promotion relation/edge.
	PromotionColumn = "promotion_id"
	// RoomTable is the table the holds the room relation/edge.
	RoomTable = "reserve_rooms"
	// RoomInverseTable is the table name for the DataRoom entity.
	// It exists in this package in order to avoid circular dependency with the "dataroom" package.
	RoomInverseTable = "data_rooms"
	// RoomColumn is the table column denoting the room relation/edge.
	RoomColumn = "room_id"
	// StatusTable is the table the holds the status relation/edge.
	StatusTable = "reserve_rooms"
	// StatusInverseTable is the table name for the StatusReserve entity.
	// It exists in this package in order to avoid circular dependency with the "statusreserve" package.
	StatusInverseTable = "status_reserves"
	// StatusColumn is the table column denoting the status relation/edge.
	StatusColumn = "status_id"
	// CheckinsTable is the table the holds the checkins relation/edge.
	CheckinsTable = "check_ins"
	// CheckinsInverseTable is the table name for the CheckIn entity.
	// It exists in this package in order to avoid circular dependency with the "checkin" package.
	CheckinsInverseTable = "check_ins"
	// CheckinsColumn is the table column denoting the checkins relation/edge.
	CheckinsColumn = "reserves_id"
)

// Columns holds all SQL columns for reserveroom fields.
var Columns = []string{
	FieldID,
	FieldReserveDate,
	FieldDuration,
	FieldProvince,
	FieldAmount,
	FieldTel,
	FieldNetPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the ReserveRoom type.
var ForeignKeys = []string{
	"customer_id",
	"room_id",
	"promotion_id",
	"status_id",
}

var (
	// DurationValidator is a validator for the "duration" field. It is called by the builders before save.
	DurationValidator func(int) error
	// ProvinceValidator is a validator for the "province" field. It is called by the builders before save.
	ProvinceValidator func(string) error
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(int) error
	// TelValidator is a validator for the "tel" field. It is called by the builders before save.
	TelValidator func(string) error
	// NetPriceValidator is a validator for the "net_price" field. It is called by the builders before save.
	NetPriceValidator func(float64) error
)
