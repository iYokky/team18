// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/fixroom"
	"github.com/team18/app/ent/furniture"
	"github.com/team18/app/ent/furnituredetail"
	"github.com/team18/app/ent/furnituretype"
	"github.com/team18/app/ent/predicate"
)

// FurnitureDetailQuery is the builder for querying FurnitureDetail entities.
type FurnitureDetailQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.FurnitureDetail
	// eager-loading edges.
	withFixs       *FixRoomQuery
	withFurnitures *FurnitureQuery
	withTypes      *FurnitureTypeQuery
	withRooms      *DataRoomQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (fdq *FurnitureDetailQuery) Where(ps ...predicate.FurnitureDetail) *FurnitureDetailQuery {
	fdq.predicates = append(fdq.predicates, ps...)
	return fdq
}

// Limit adds a limit step to the query.
func (fdq *FurnitureDetailQuery) Limit(limit int) *FurnitureDetailQuery {
	fdq.limit = &limit
	return fdq
}

// Offset adds an offset step to the query.
func (fdq *FurnitureDetailQuery) Offset(offset int) *FurnitureDetailQuery {
	fdq.offset = &offset
	return fdq
}

// Order adds an order step to the query.
func (fdq *FurnitureDetailQuery) Order(o ...OrderFunc) *FurnitureDetailQuery {
	fdq.order = append(fdq.order, o...)
	return fdq
}

// QueryFixs chains the current query on the fixs edge.
func (fdq *FurnitureDetailQuery) QueryFixs() *FixRoomQuery {
	query := &FixRoomQuery{config: fdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(furnituredetail.Table, furnituredetail.FieldID, fdq.sqlQuery()),
			sqlgraph.To(fixroom.Table, fixroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, furnituredetail.FixsTable, furnituredetail.FixsColumn),
		)
		fromU = sqlgraph.SetNeighbors(fdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFurnitures chains the current query on the furnitures edge.
func (fdq *FurnitureDetailQuery) QueryFurnitures() *FurnitureQuery {
	query := &FurnitureQuery{config: fdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(furnituredetail.Table, furnituredetail.FieldID, fdq.sqlQuery()),
			sqlgraph.To(furniture.Table, furniture.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, furnituredetail.FurnituresTable, furnituredetail.FurnituresColumn),
		)
		fromU = sqlgraph.SetNeighbors(fdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTypes chains the current query on the types edge.
func (fdq *FurnitureDetailQuery) QueryTypes() *FurnitureTypeQuery {
	query := &FurnitureTypeQuery{config: fdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(furnituredetail.Table, furnituredetail.FieldID, fdq.sqlQuery()),
			sqlgraph.To(furnituretype.Table, furnituretype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, furnituredetail.TypesTable, furnituredetail.TypesColumn),
		)
		fromU = sqlgraph.SetNeighbors(fdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRooms chains the current query on the rooms edge.
func (fdq *FurnitureDetailQuery) QueryRooms() *DataRoomQuery {
	query := &DataRoomQuery{config: fdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(furnituredetail.Table, furnituredetail.FieldID, fdq.sqlQuery()),
			sqlgraph.To(dataroom.Table, dataroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, furnituredetail.RoomsTable, furnituredetail.RoomsColumn),
		)
		fromU = sqlgraph.SetNeighbors(fdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FurnitureDetail entity in the query. Returns *NotFoundError when no furnituredetail was found.
func (fdq *FurnitureDetailQuery) First(ctx context.Context) (*FurnitureDetail, error) {
	fds, err := fdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(fds) == 0 {
		return nil, &NotFoundError{furnituredetail.Label}
	}
	return fds[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fdq *FurnitureDetailQuery) FirstX(ctx context.Context) *FurnitureDetail {
	fd, err := fdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return fd
}

// FirstID returns the first FurnitureDetail id in the query. Returns *NotFoundError when no id was found.
func (fdq *FurnitureDetailQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{furnituredetail.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (fdq *FurnitureDetailQuery) FirstXID(ctx context.Context) int {
	id, err := fdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only FurnitureDetail entity in the query, returns an error if not exactly one entity was returned.
func (fdq *FurnitureDetailQuery) Only(ctx context.Context) (*FurnitureDetail, error) {
	fds, err := fdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(fds) {
	case 1:
		return fds[0], nil
	case 0:
		return nil, &NotFoundError{furnituredetail.Label}
	default:
		return nil, &NotSingularError{furnituredetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fdq *FurnitureDetailQuery) OnlyX(ctx context.Context) *FurnitureDetail {
	fd, err := fdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return fd
}

// OnlyID returns the only FurnitureDetail id in the query, returns an error if not exactly one id was returned.
func (fdq *FurnitureDetailQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{furnituredetail.Label}
	default:
		err = &NotSingularError{furnituredetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fdq *FurnitureDetailQuery) OnlyIDX(ctx context.Context) int {
	id, err := fdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FurnitureDetails.
func (fdq *FurnitureDetailQuery) All(ctx context.Context) ([]*FurnitureDetail, error) {
	if err := fdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return fdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (fdq *FurnitureDetailQuery) AllX(ctx context.Context) []*FurnitureDetail {
	fds, err := fdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return fds
}

// IDs executes the query and returns a list of FurnitureDetail ids.
func (fdq *FurnitureDetailQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := fdq.Select(furnituredetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fdq *FurnitureDetailQuery) IDsX(ctx context.Context) []int {
	ids, err := fdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fdq *FurnitureDetailQuery) Count(ctx context.Context) (int, error) {
	if err := fdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return fdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (fdq *FurnitureDetailQuery) CountX(ctx context.Context) int {
	count, err := fdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fdq *FurnitureDetailQuery) Exist(ctx context.Context) (bool, error) {
	if err := fdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return fdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (fdq *FurnitureDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := fdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fdq *FurnitureDetailQuery) Clone() *FurnitureDetailQuery {
	return &FurnitureDetailQuery{
		config:     fdq.config,
		limit:      fdq.limit,
		offset:     fdq.offset,
		order:      append([]OrderFunc{}, fdq.order...),
		unique:     append([]string{}, fdq.unique...),
		predicates: append([]predicate.FurnitureDetail{}, fdq.predicates...),
		// clone intermediate query.
		sql:  fdq.sql.Clone(),
		path: fdq.path,
	}
}

//  WithFixs tells the query-builder to eager-loads the nodes that are connected to
// the "fixs" edge. The optional arguments used to configure the query builder of the edge.
func (fdq *FurnitureDetailQuery) WithFixs(opts ...func(*FixRoomQuery)) *FurnitureDetailQuery {
	query := &FixRoomQuery{config: fdq.config}
	for _, opt := range opts {
		opt(query)
	}
	fdq.withFixs = query
	return fdq
}

//  WithFurnitures tells the query-builder to eager-loads the nodes that are connected to
// the "furnitures" edge. The optional arguments used to configure the query builder of the edge.
func (fdq *FurnitureDetailQuery) WithFurnitures(opts ...func(*FurnitureQuery)) *FurnitureDetailQuery {
	query := &FurnitureQuery{config: fdq.config}
	for _, opt := range opts {
		opt(query)
	}
	fdq.withFurnitures = query
	return fdq
}

//  WithTypes tells the query-builder to eager-loads the nodes that are connected to
// the "types" edge. The optional arguments used to configure the query builder of the edge.
func (fdq *FurnitureDetailQuery) WithTypes(opts ...func(*FurnitureTypeQuery)) *FurnitureDetailQuery {
	query := &FurnitureTypeQuery{config: fdq.config}
	for _, opt := range opts {
		opt(query)
	}
	fdq.withTypes = query
	return fdq
}

//  WithRooms tells the query-builder to eager-loads the nodes that are connected to
// the "rooms" edge. The optional arguments used to configure the query builder of the edge.
func (fdq *FurnitureDetailQuery) WithRooms(opts ...func(*DataRoomQuery)) *FurnitureDetailQuery {
	query := &DataRoomQuery{config: fdq.config}
	for _, opt := range opts {
		opt(query)
	}
	fdq.withRooms = query
	return fdq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DateAdd time.Time `json:"date_add,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FurnitureDetail.Query().
//		GroupBy(furnituredetail.FieldDateAdd).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (fdq *FurnitureDetailQuery) GroupBy(field string, fields ...string) *FurnitureDetailGroupBy {
	group := &FurnitureDetailGroupBy{config: fdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := fdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return fdq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		DateAdd time.Time `json:"date_add,omitempty"`
//	}
//
//	client.FurnitureDetail.Query().
//		Select(furnituredetail.FieldDateAdd).
//		Scan(ctx, &v)
//
func (fdq *FurnitureDetailQuery) Select(field string, fields ...string) *FurnitureDetailSelect {
	selector := &FurnitureDetailSelect{config: fdq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := fdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return fdq.sqlQuery(), nil
	}
	return selector
}

func (fdq *FurnitureDetailQuery) prepareQuery(ctx context.Context) error {
	if fdq.path != nil {
		prev, err := fdq.path(ctx)
		if err != nil {
			return err
		}
		fdq.sql = prev
	}
	return nil
}

func (fdq *FurnitureDetailQuery) sqlAll(ctx context.Context) ([]*FurnitureDetail, error) {
	var (
		nodes       = []*FurnitureDetail{}
		withFKs     = fdq.withFKs
		_spec       = fdq.querySpec()
		loadedTypes = [4]bool{
			fdq.withFixs != nil,
			fdq.withFurnitures != nil,
			fdq.withTypes != nil,
			fdq.withRooms != nil,
		}
	)
	if fdq.withFurnitures != nil || fdq.withTypes != nil || fdq.withRooms != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, furnituredetail.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &FurnitureDetail{config: fdq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, fdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := fdq.withFixs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*FurnitureDetail)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.FixRoom(func(s *sql.Selector) {
			s.Where(sql.InValues(furnituredetail.FixsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.object_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "object_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "object_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Fixs = append(node.Edges.Fixs, n)
		}
	}

	if query := fdq.withFurnitures; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*FurnitureDetail)
		for i := range nodes {
			if fk := nodes[i].furniture_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(furniture.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "furniture_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Furnitures = n
			}
		}
	}

	if query := fdq.withTypes; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*FurnitureDetail)
		for i := range nodes {
			if fk := nodes[i].type_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(furnituretype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "type_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Types = n
			}
		}
	}

	if query := fdq.withRooms; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*FurnitureDetail)
		for i := range nodes {
			if fk := nodes[i].room_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(dataroom.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "room_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Rooms = n
			}
		}
	}

	return nodes, nil
}

func (fdq *FurnitureDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fdq.querySpec()
	return sqlgraph.CountNodes(ctx, fdq.driver, _spec)
}

func (fdq *FurnitureDetailQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := fdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (fdq *FurnitureDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   furnituredetail.Table,
			Columns: furnituredetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: furnituredetail.FieldID,
			},
		},
		From:   fdq.sql,
		Unique: true,
	}
	if ps := fdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fdq *FurnitureDetailQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(fdq.driver.Dialect())
	t1 := builder.Table(furnituredetail.Table)
	selector := builder.Select(t1.Columns(furnituredetail.Columns...)...).From(t1)
	if fdq.sql != nil {
		selector = fdq.sql
		selector.Select(selector.Columns(furnituredetail.Columns...)...)
	}
	for _, p := range fdq.predicates {
		p(selector)
	}
	for _, p := range fdq.order {
		p(selector)
	}
	if offset := fdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FurnitureDetailGroupBy is the builder for group-by FurnitureDetail entities.
type FurnitureDetailGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fdgb *FurnitureDetailGroupBy) Aggregate(fns ...AggregateFunc) *FurnitureDetailGroupBy {
	fdgb.fns = append(fdgb.fns, fns...)
	return fdgb
}

// Scan applies the group-by query and scan the result into the given value.
func (fdgb *FurnitureDetailGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := fdgb.path(ctx)
	if err != nil {
		return err
	}
	fdgb.sql = query
	return fdgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (fdgb *FurnitureDetailGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := fdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (fdgb *FurnitureDetailGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(fdgb.fields) > 1 {
		return nil, errors.New("ent: FurnitureDetailGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := fdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (fdgb *FurnitureDetailGroupBy) StringsX(ctx context.Context) []string {
	v, err := fdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (fdgb *FurnitureDetailGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = fdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{furnituredetail.Label}
	default:
		err = fmt.Errorf("ent: FurnitureDetailGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (fdgb *FurnitureDetailGroupBy) StringX(ctx context.Context) string {
	v, err := fdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (fdgb *FurnitureDetailGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(fdgb.fields) > 1 {
		return nil, errors.New("ent: FurnitureDetailGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := fdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (fdgb *FurnitureDetailGroupBy) IntsX(ctx context.Context) []int {
	v, err := fdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (fdgb *FurnitureDetailGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = fdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{furnituredetail.Label}
	default:
		err = fmt.Errorf("ent: FurnitureDetailGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (fdgb *FurnitureDetailGroupBy) IntX(ctx context.Context) int {
	v, err := fdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (fdgb *FurnitureDetailGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(fdgb.fields) > 1 {
		return nil, errors.New("ent: FurnitureDetailGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := fdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (fdgb *FurnitureDetailGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := fdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (fdgb *FurnitureDetailGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = fdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{furnituredetail.Label}
	default:
		err = fmt.Errorf("ent: FurnitureDetailGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (fdgb *FurnitureDetailGroupBy) Float64X(ctx context.Context) float64 {
	v, err := fdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (fdgb *FurnitureDetailGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(fdgb.fields) > 1 {
		return nil, errors.New("ent: FurnitureDetailGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := fdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (fdgb *FurnitureDetailGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := fdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (fdgb *FurnitureDetailGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = fdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{furnituredetail.Label}
	default:
		err = fmt.Errorf("ent: FurnitureDetailGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (fdgb *FurnitureDetailGroupBy) BoolX(ctx context.Context) bool {
	v, err := fdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fdgb *FurnitureDetailGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := fdgb.sqlQuery().Query()
	if err := fdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fdgb *FurnitureDetailGroupBy) sqlQuery() *sql.Selector {
	selector := fdgb.sql
	columns := make([]string, 0, len(fdgb.fields)+len(fdgb.fns))
	columns = append(columns, fdgb.fields...)
	for _, fn := range fdgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(fdgb.fields...)
}

// FurnitureDetailSelect is the builder for select fields of FurnitureDetail entities.
type FurnitureDetailSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (fds *FurnitureDetailSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := fds.path(ctx)
	if err != nil {
		return err
	}
	fds.sql = query
	return fds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (fds *FurnitureDetailSelect) ScanX(ctx context.Context, v interface{}) {
	if err := fds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (fds *FurnitureDetailSelect) Strings(ctx context.Context) ([]string, error) {
	if len(fds.fields) > 1 {
		return nil, errors.New("ent: FurnitureDetailSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := fds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (fds *FurnitureDetailSelect) StringsX(ctx context.Context) []string {
	v, err := fds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (fds *FurnitureDetailSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = fds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{furnituredetail.Label}
	default:
		err = fmt.Errorf("ent: FurnitureDetailSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (fds *FurnitureDetailSelect) StringX(ctx context.Context) string {
	v, err := fds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (fds *FurnitureDetailSelect) Ints(ctx context.Context) ([]int, error) {
	if len(fds.fields) > 1 {
		return nil, errors.New("ent: FurnitureDetailSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := fds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (fds *FurnitureDetailSelect) IntsX(ctx context.Context) []int {
	v, err := fds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (fds *FurnitureDetailSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = fds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{furnituredetail.Label}
	default:
		err = fmt.Errorf("ent: FurnitureDetailSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (fds *FurnitureDetailSelect) IntX(ctx context.Context) int {
	v, err := fds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (fds *FurnitureDetailSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(fds.fields) > 1 {
		return nil, errors.New("ent: FurnitureDetailSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := fds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (fds *FurnitureDetailSelect) Float64sX(ctx context.Context) []float64 {
	v, err := fds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (fds *FurnitureDetailSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = fds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{furnituredetail.Label}
	default:
		err = fmt.Errorf("ent: FurnitureDetailSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (fds *FurnitureDetailSelect) Float64X(ctx context.Context) float64 {
	v, err := fds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (fds *FurnitureDetailSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(fds.fields) > 1 {
		return nil, errors.New("ent: FurnitureDetailSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := fds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (fds *FurnitureDetailSelect) BoolsX(ctx context.Context) []bool {
	v, err := fds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (fds *FurnitureDetailSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = fds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{furnituredetail.Label}
	default:
		err = fmt.Errorf("ent: FurnitureDetailSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (fds *FurnitureDetailSelect) BoolX(ctx context.Context) bool {
	v, err := fds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fds *FurnitureDetailSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := fds.sqlQuery().Query()
	if err := fds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fds *FurnitureDetailSelect) sqlQuery() sql.Querier {
	selector := fds.sql
	selector.Select(selector.Columns(fds.fields...)...)
	return selector
}
